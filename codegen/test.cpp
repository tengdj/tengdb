// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("test.ll", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 FuncTy_0_args.push_back(PointerTy_1);
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 VectorType* VectorTy_4 = VectorType::get(IntegerType::get(mod->getContext(), 64), 4);
 
 PointerType* PointerTy_3 = PointerType::get(VectorTy_4, 0);
 
 PointerType* PointerTy_2 = PointerType::get(PointerTy_3, 0);
 
 PointerType* PointerTy_5 = PointerType::get(PointerTy_1, 0);
 
 VectorType* VectorTy_6 = VectorType::get(IntegerType::get(mod->getContext(), 32), 8);
 
 PointerType* PointerTy_7 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 VectorType* VectorTy_8 = VectorType::get(IntegerType::get(mod->getContext(), 8), 32);
 
 std::vector<Type*>FuncTy_10_args;
 FuncTy_10_args.push_back(PointerTy_7);
 FuncTy_10_args.push_back(VectorTy_8);
 FunctionType* FuncTy_10 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_10_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_9 = PointerType::get(FuncTy_10, 0);
 
 
 // Function Declarations
 
 Function* func__Z4testPi = mod->getFunction("_Z4testPi");
 if (!func__Z4testPi) {
 func__Z4testPi = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z4testPi", mod); 
 func__Z4testPi->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z4testPi_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__Z4testPi_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__Z4testPi->setAttributes(func__Z4testPi_PAL);
 
 Function* func_llvm_x86_avx_storeu_dq_256 = mod->getFunction("llvm.x86.avx.storeu.dq.256");
 if (!func_llvm_x86_avx_storeu_dq_256) {
 func_llvm_x86_avx_storeu_dq_256 = Function::Create(
  /*Type=*/FuncTy_10,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"llvm.x86.avx.storeu.dq.256", mod); // (external, no body)
 func_llvm_x86_avx_storeu_dq_256->setCallingConv(CallingConv::C);
 }
 AttributeSet func_llvm_x86_avx_storeu_dq_256_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_llvm_x86_avx_storeu_dq_256_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_llvm_x86_avx_storeu_dq_256->setAttributes(func_llvm_x86_avx_storeu_dq_256_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_11 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int64_12 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: _Z4testPi (func__Z4testPi)
 {
  Function::arg_iterator args = func__Z4testPi->arg_begin();
  Value* ptr_result = args++;
  ptr_result->setName("result");
  
  BasicBlock* label_13 = BasicBlock::Create(mod->getContext(), "",func__Z4testPi,0);
  
  // Block  (label_13)
  AllocaInst* ptr_14 = new AllocaInst(PointerTy_3, "", label_13);
  ptr_14->setAlignment(8);
  AllocaInst* ptr_15 = new AllocaInst(VectorTy_4, "", label_13);
  ptr_15->setAlignment(32);
  AllocaInst* ptr_16 = new AllocaInst(VectorTy_4, "", label_13);
  ptr_16->setAlignment(32);
  AllocaInst* ptr_17 = new AllocaInst(VectorTy_4, "", label_13);
  ptr_17->setAlignment(32);
  AllocaInst* ptr_18 = new AllocaInst(PointerTy_1, "", label_13);
  ptr_18->setAlignment(8);
  StoreInst* void_19 = new StoreInst(ptr_result, ptr_18, false, label_13);
  void_19->setAlignment(8);
  LoadInst* ptr_20 = new LoadInst(ptr_18, "", false, label_13);
  ptr_20->setAlignment(8);
  GetElementPtrInst* ptr_21 = GetElementPtrInst::Create(IntegerType::get(mod->getContext(), 32), ptr_20, {
   const_int64_12
  }, "", label_13);
  CastInst* ptr_22 = new BitCastInst(ptr_21, PointerTy_3, "", label_13);
  LoadInst* ptr_23 = new LoadInst(ptr_18, "", false, label_13);
  ptr_23->setAlignment(8);
  GetElementPtrInst* ptr_24 = GetElementPtrInst::Create(IntegerType::get(mod->getContext(), 32), ptr_23, {
   const_int64_12
  }, "", label_13);
  CastInst* ptr_25 = new BitCastInst(ptr_24, PointerTy_3, "", label_13);
  LoadInst* packed_26 = new LoadInst(ptr_25, "", false, label_13);
  packed_26->setAlignment(32);
  LoadInst* ptr_27 = new LoadInst(ptr_18, "", false, label_13);
  ptr_27->setAlignment(8);
  GetElementPtrInst* ptr_28 = GetElementPtrInst::Create(IntegerType::get(mod->getContext(), 32), ptr_27, {
   const_int64_12
  }, "", label_13);
  CastInst* ptr_29 = new BitCastInst(ptr_28, PointerTy_3, "", label_13);
  LoadInst* packed_30 = new LoadInst(ptr_29, "", false, label_13);
  packed_30->setAlignment(32);
  StoreInst* void_31 = new StoreInst(packed_26, ptr_16, false, label_13);
  void_31->setAlignment(32);
  StoreInst* void_32 = new StoreInst(packed_30, ptr_17, false, label_13);
  void_32->setAlignment(32);
  LoadInst* packed_33 = new LoadInst(ptr_16, "", false, label_13);
  packed_33->setAlignment(32);
  CastInst* packed_34 = new BitCastInst(packed_33, VectorTy_6, "", label_13);
  LoadInst* packed_35 = new LoadInst(ptr_17, "", false, label_13);
  packed_35->setAlignment(32);
  CastInst* packed_36 = new BitCastInst(packed_35, VectorTy_6, "", label_13);
  BinaryOperator* packed_37 = BinaryOperator::Create(Instruction::Add, packed_34, packed_36, "", label_13);
  CastInst* packed_38 = new BitCastInst(packed_37, VectorTy_4, "", label_13);
  StoreInst* void_39 = new StoreInst(ptr_22, ptr_14, false, label_13);
  void_39->setAlignment(8);
  StoreInst* void_40 = new StoreInst(packed_38, ptr_15, false, label_13);
  void_40->setAlignment(32);
  LoadInst* ptr_41 = new LoadInst(ptr_14, "", false, label_13);
  ptr_41->setAlignment(8);
  CastInst* ptr_42 = new BitCastInst(ptr_41, PointerTy_7, "", label_13);
  LoadInst* packed_43 = new LoadInst(ptr_15, "", false, label_13);
  packed_43->setAlignment(32);
  CastInst* packed_44 = new BitCastInst(packed_43, VectorTy_8, "", label_13);
  std::vector<Value*> void_45_params;
  void_45_params.push_back(ptr_42);
  void_45_params.push_back(packed_44);
  CallInst* void_45 = CallInst::Create(func_llvm_x86_avx_storeu_dq_256, void_45_params, "", label_13);
  void_45->setCallingConv(CallingConv::C);
  void_45->setTailCall(false);
  AttributeSet void_45_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   void_45_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  void_45->setAttributes(void_45_PAL);
  
  ReturnInst::Create(mod->getContext(), label_13);
  
 }
 
 return mod;
}
