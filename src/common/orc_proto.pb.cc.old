// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orc_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../include/orc_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace orc {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* IntegerStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegerStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* BucketStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BucketStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecimalStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecimalStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* DateStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimestampStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimestampStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowIndexEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowIndexEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* BloomFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloomFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BloomFilterIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloomFilterIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stream_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Stream_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ColumnEncoding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnEncoding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ColumnEncoding_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StripeFooter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StripeFooter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Type_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StripeInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StripeInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMetadataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMetadataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StripeStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StripeStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Footer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Footer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostScript_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostScript_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileTail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileTail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CompressionKind_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_orc_5fproto_2eproto() {
  protobuf_AddDesc_orc_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "orc_proto.proto");
  GOOGLE_CHECK(file != NULL);
  IntegerStatistics_descriptor_ = file->message_type(0);
  static const int IntegerStatistics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerStatistics, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerStatistics, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerStatistics, sum_),
  };
  IntegerStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegerStatistics_descriptor_,
      IntegerStatistics::default_instance_,
      IntegerStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegerStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegerStatistics));
  DoubleStatistics_descriptor_ = file->message_type(1);
  static const int DoubleStatistics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStatistics, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStatistics, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStatistics, sum_),
  };
  DoubleStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleStatistics_descriptor_,
      DoubleStatistics::default_instance_,
      DoubleStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleStatistics));
  StringStatistics_descriptor_ = file->message_type(2);
  static const int StringStatistics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStatistics, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStatistics, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStatistics, sum_),
  };
  StringStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringStatistics_descriptor_,
      StringStatistics::default_instance_,
      StringStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringStatistics));
  BucketStatistics_descriptor_ = file->message_type(3);
  static const int BucketStatistics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketStatistics, count_),
  };
  BucketStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BucketStatistics_descriptor_,
      BucketStatistics::default_instance_,
      BucketStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BucketStatistics));
  DecimalStatistics_descriptor_ = file->message_type(4);
  static const int DecimalStatistics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimalStatistics, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimalStatistics, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimalStatistics, sum_),
  };
  DecimalStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecimalStatistics_descriptor_,
      DecimalStatistics::default_instance_,
      DecimalStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimalStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimalStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecimalStatistics));
  DateStatistics_descriptor_ = file->message_type(5);
  static const int DateStatistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateStatistics, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateStatistics, maximum_),
  };
  DateStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DateStatistics_descriptor_,
      DateStatistics::default_instance_,
      DateStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DateStatistics));
  TimestampStatistics_descriptor_ = file->message_type(6);
  static const int TimestampStatistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampStatistics, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampStatistics, maximum_),
  };
  TimestampStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimestampStatistics_descriptor_,
      TimestampStatistics::default_instance_,
      TimestampStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimestampStatistics));
  BinaryStatistics_descriptor_ = file->message_type(7);
  static const int BinaryStatistics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryStatistics, sum_),
  };
  BinaryStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryStatistics_descriptor_,
      BinaryStatistics::default_instance_,
      BinaryStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryStatistics));
  ColumnStatistics_descriptor_ = file->message_type(8);
  static const int ColumnStatistics_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, numberofvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, intstatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, doublestatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, stringstatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, bucketstatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, decimalstatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, datestatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, binarystatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, timestampstatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, hasnull_),
  };
  ColumnStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnStatistics_descriptor_,
      ColumnStatistics::default_instance_,
      ColumnStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnStatistics));
  RowIndexEntry_descriptor_ = file->message_type(9);
  static const int RowIndexEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIndexEntry, positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIndexEntry, statistics_),
  };
  RowIndexEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowIndexEntry_descriptor_,
      RowIndexEntry::default_instance_,
      RowIndexEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIndexEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIndexEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowIndexEntry));
  RowIndex_descriptor_ = file->message_type(10);
  static const int RowIndex_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIndex, entry_),
  };
  RowIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowIndex_descriptor_,
      RowIndex::default_instance_,
      RowIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowIndex));
  BloomFilter_descriptor_ = file->message_type(11);
  static const int BloomFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilter, numhashfunctions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilter, bitset_),
  };
  BloomFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloomFilter_descriptor_,
      BloomFilter::default_instance_,
      BloomFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloomFilter));
  BloomFilterIndex_descriptor_ = file->message_type(12);
  static const int BloomFilterIndex_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterIndex, bloomfilter_),
  };
  BloomFilterIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloomFilterIndex_descriptor_,
      BloomFilterIndex::default_instance_,
      BloomFilterIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloomFilterIndex));
  Stream_descriptor_ = file->message_type(13);
  static const int Stream_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, length_),
  };
  Stream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stream_descriptor_,
      Stream::default_instance_,
      Stream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stream));
  Stream_Kind_descriptor_ = Stream_descriptor_->enum_type(0);
  ColumnEncoding_descriptor_ = file->message_type(14);
  static const int ColumnEncoding_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnEncoding, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnEncoding, dictionarysize_),
  };
  ColumnEncoding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnEncoding_descriptor_,
      ColumnEncoding::default_instance_,
      ColumnEncoding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnEncoding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnEncoding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnEncoding));
  ColumnEncoding_Kind_descriptor_ = ColumnEncoding_descriptor_->enum_type(0);
  StripeFooter_descriptor_ = file->message_type(15);
  static const int StripeFooter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeFooter, streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeFooter, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeFooter, writertimezone_),
  };
  StripeFooter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StripeFooter_descriptor_,
      StripeFooter::default_instance_,
      StripeFooter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeFooter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeFooter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StripeFooter));
  Type_descriptor_ = file->message_type(16);
  static const int Type_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, subtypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, fieldnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, maximumlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, scale_),
  };
  Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Type_descriptor_,
      Type::default_instance_,
      Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Type));
  Type_Kind_descriptor_ = Type_descriptor_->enum_type(0);
  StripeInformation_descriptor_ = file->message_type(17);
  static const int StripeInformation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeInformation, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeInformation, indexlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeInformation, datalength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeInformation, footerlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeInformation, numberofrows_),
  };
  StripeInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StripeInformation_descriptor_,
      StripeInformation::default_instance_,
      StripeInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StripeInformation));
  UserMetadataItem_descriptor_ = file->message_type(18);
  static const int UserMetadataItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetadataItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetadataItem, value_),
  };
  UserMetadataItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMetadataItem_descriptor_,
      UserMetadataItem::default_instance_,
      UserMetadataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetadataItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetadataItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMetadataItem));
  StripeStatistics_descriptor_ = file->message_type(19);
  static const int StripeStatistics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeStatistics, colstats_),
  };
  StripeStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StripeStatistics_descriptor_,
      StripeStatistics::default_instance_,
      StripeStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripeStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StripeStatistics));
  Metadata_descriptor_ = file->message_type(20);
  static const int Metadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, stripestats_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
  Footer_descriptor_ = file->message_type(21);
  static const int Footer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, headerlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, contentlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, stripes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, numberofrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, statistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, rowindexstride_),
  };
  Footer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Footer_descriptor_,
      Footer::default_instance_,
      Footer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Footer));
  PostScript_descriptor_ = file->message_type(22);
  static const int PostScript_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, footerlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, compression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, compressionblocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, metadatalength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, writerversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, magic_),
  };
  PostScript_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostScript_descriptor_,
      PostScript::default_instance_,
      PostScript_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostScript, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostScript));
  FileTail_descriptor_ = file->message_type(23);
  static const int FileTail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTail, postscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTail, footer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTail, filelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTail, postscriptlength_),
  };
  FileTail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileTail_descriptor_,
      FileTail::default_instance_,
      FileTail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileTail));
  CompressionKind_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_orc_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegerStatistics_descriptor_, &IntegerStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleStatistics_descriptor_, &DoubleStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringStatistics_descriptor_, &StringStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BucketStatistics_descriptor_, &BucketStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecimalStatistics_descriptor_, &DecimalStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DateStatistics_descriptor_, &DateStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimestampStatistics_descriptor_, &TimestampStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryStatistics_descriptor_, &BinaryStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnStatistics_descriptor_, &ColumnStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowIndexEntry_descriptor_, &RowIndexEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowIndex_descriptor_, &RowIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloomFilter_descriptor_, &BloomFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloomFilterIndex_descriptor_, &BloomFilterIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stream_descriptor_, &Stream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnEncoding_descriptor_, &ColumnEncoding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StripeFooter_descriptor_, &StripeFooter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Type_descriptor_, &Type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StripeInformation_descriptor_, &StripeInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMetadataItem_descriptor_, &UserMetadataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StripeStatistics_descriptor_, &StripeStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Footer_descriptor_, &Footer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostScript_descriptor_, &PostScript::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileTail_descriptor_, &FileTail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_orc_5fproto_2eproto() {
  delete IntegerStatistics::default_instance_;
  delete IntegerStatistics_reflection_;
  delete DoubleStatistics::default_instance_;
  delete DoubleStatistics_reflection_;
  delete StringStatistics::default_instance_;
  delete StringStatistics_reflection_;
  delete BucketStatistics::default_instance_;
  delete BucketStatistics_reflection_;
  delete DecimalStatistics::default_instance_;
  delete DecimalStatistics_reflection_;
  delete DateStatistics::default_instance_;
  delete DateStatistics_reflection_;
  delete TimestampStatistics::default_instance_;
  delete TimestampStatistics_reflection_;
  delete BinaryStatistics::default_instance_;
  delete BinaryStatistics_reflection_;
  delete ColumnStatistics::default_instance_;
  delete ColumnStatistics_reflection_;
  delete RowIndexEntry::default_instance_;
  delete RowIndexEntry_reflection_;
  delete RowIndex::default_instance_;
  delete RowIndex_reflection_;
  delete BloomFilter::default_instance_;
  delete BloomFilter_reflection_;
  delete BloomFilterIndex::default_instance_;
  delete BloomFilterIndex_reflection_;
  delete Stream::default_instance_;
  delete Stream_reflection_;
  delete ColumnEncoding::default_instance_;
  delete ColumnEncoding_reflection_;
  delete StripeFooter::default_instance_;
  delete StripeFooter_reflection_;
  delete Type::default_instance_;
  delete Type_reflection_;
  delete StripeInformation::default_instance_;
  delete StripeInformation_reflection_;
  delete UserMetadataItem::default_instance_;
  delete UserMetadataItem_reflection_;
  delete StripeStatistics::default_instance_;
  delete StripeStatistics_reflection_;
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
  delete Footer::default_instance_;
  delete Footer_reflection_;
  delete PostScript::default_instance_;
  delete PostScript_reflection_;
  delete FileTail::default_instance_;
  delete FileTail_reflection_;
}

void protobuf_AddDesc_orc_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017orc_proto.proto\022\torc.proto\"B\n\021IntegerS"
    "tatistics\022\017\n\007minimum\030\001 \001(\022\022\017\n\007maximum\030\002 "
    "\001(\022\022\013\n\003sum\030\003 \001(\022\"A\n\020DoubleStatistics\022\017\n\007"
    "minimum\030\001 \001(\001\022\017\n\007maximum\030\002 \001(\001\022\013\n\003sum\030\003 "
    "\001(\001\"A\n\020StringStatistics\022\017\n\007minimum\030\001 \001(\t"
    "\022\017\n\007maximum\030\002 \001(\t\022\013\n\003sum\030\003 \001(\022\"%\n\020Bucket"
    "Statistics\022\021\n\005count\030\001 \003(\004B\002\020\001\"B\n\021Decimal"
    "Statistics\022\017\n\007minimum\030\001 \001(\t\022\017\n\007maximum\030\002"
    " \001(\t\022\013\n\003sum\030\003 \001(\t\"2\n\016DateStatistics\022\017\n\007m"
    "inimum\030\001 \001(\021\022\017\n\007maximum\030\002 \001(\021\"7\n\023Timesta"
    "mpStatistics\022\017\n\007minimum\030\001 \001(\022\022\017\n\007maximum"
    "\030\002 \001(\022\"\037\n\020BinaryStatistics\022\013\n\003sum\030\001 \001(\022\""
    "\365\003\n\020ColumnStatistics\022\026\n\016numberOfValues\030\001"
    " \001(\004\0223\n\rintStatistics\030\002 \001(\0132\034.orc.proto."
    "IntegerStatistics\0225\n\020doubleStatistics\030\003 "
    "\001(\0132\033.orc.proto.DoubleStatistics\0225\n\020stri"
    "ngStatistics\030\004 \001(\0132\033.orc.proto.StringSta"
    "tistics\0225\n\020bucketStatistics\030\005 \001(\0132\033.orc."
    "proto.BucketStatistics\0227\n\021decimalStatist"
    "ics\030\006 \001(\0132\034.orc.proto.DecimalStatistics\022"
    "1\n\016dateStatistics\030\007 \001(\0132\031.orc.proto.Date"
    "Statistics\0225\n\020binaryStatistics\030\010 \001(\0132\033.o"
    "rc.proto.BinaryStatistics\022;\n\023timestampSt"
    "atistics\030\t \001(\0132\036.orc.proto.TimestampStat"
    "istics\022\017\n\007hasNull\030\n \001(\010\"W\n\rRowIndexEntry"
    "\022\025\n\tpositions\030\001 \003(\004B\002\020\001\022/\n\nstatistics\030\002 "
    "\001(\0132\033.orc.proto.ColumnStatistics\"3\n\010RowI"
    "ndex\022\'\n\005entry\030\001 \003(\0132\030.orc.proto.RowIndex"
    "Entry\"7\n\013BloomFilter\022\030\n\020numHashFunctions"
    "\030\001 \001(\r\022\016\n\006bitset\030\002 \003(\006\"\?\n\020BloomFilterInd"
    "ex\022+\n\013bloomFilter\030\001 \003(\0132\026.orc.proto.Bloo"
    "mFilter\"\325\001\n\006Stream\022$\n\004kind\030\001 \001(\0162\026.orc.p"
    "roto.Stream.Kind\022\016\n\006column\030\002 \001(\r\022\016\n\006leng"
    "th\030\003 \001(\004\"\204\001\n\004Kind\022\013\n\007PRESENT\020\000\022\010\n\004DATA\020\001"
    "\022\n\n\006LENGTH\020\002\022\023\n\017DICTIONARY_DATA\020\003\022\024\n\020DIC"
    "TIONARY_COUNT\020\004\022\r\n\tSECONDARY\020\005\022\r\n\tROW_IN"
    "DEX\020\006\022\020\n\014BLOOM_FILTER\020\007\"\234\001\n\016ColumnEncodi"
    "ng\022,\n\004kind\030\001 \001(\0162\036.orc.proto.ColumnEncod"
    "ing.Kind\022\026\n\016dictionarySize\030\002 \001(\r\"D\n\004Kind"
    "\022\n\n\006DIRECT\020\000\022\016\n\nDICTIONARY\020\001\022\r\n\tDIRECT_V"
    "2\020\002\022\021\n\rDICTIONARY_V2\020\003\"v\n\014StripeFooter\022\""
    "\n\007streams\030\001 \003(\0132\021.orc.proto.Stream\022*\n\007co"
    "lumns\030\002 \003(\0132\031.orc.proto.ColumnEncoding\022\026"
    "\n\016writerTimezone\030\003 \001(\t\"\341\002\n\004Type\022\"\n\004kind\030"
    "\001 \001(\0162\024.orc.proto.Type.Kind\022\024\n\010subtypes\030"
    "\002 \003(\rB\002\020\001\022\022\n\nfieldNames\030\003 \003(\t\022\025\n\rmaximum"
    "Length\030\004 \001(\r\022\021\n\tprecision\030\005 \001(\r\022\r\n\005scale"
    "\030\006 \001(\r\"\321\001\n\004Kind\022\013\n\007BOOLEAN\020\000\022\010\n\004BYTE\020\001\022\t"
    "\n\005SHORT\020\002\022\007\n\003INT\020\003\022\010\n\004LONG\020\004\022\t\n\005FLOAT\020\005\022"
    "\n\n\006DOUBLE\020\006\022\n\n\006STRING\020\007\022\n\n\006BINARY\020\010\022\r\n\tT"
    "IMESTAMP\020\t\022\010\n\004LIST\020\n\022\007\n\003MAP\020\013\022\n\n\006STRUCT\020"
    "\014\022\t\n\005UNION\020\r\022\013\n\007DECIMAL\020\016\022\010\n\004DATE\020\017\022\013\n\007V"
    "ARCHAR\020\020\022\010\n\004CHAR\020\021\"x\n\021StripeInformation\022"
    "\016\n\006offset\030\001 \001(\004\022\023\n\013indexLength\030\002 \001(\004\022\022\n\n"
    "dataLength\030\003 \001(\004\022\024\n\014footerLength\030\004 \001(\004\022\024"
    "\n\014numberOfRows\030\005 \001(\004\"/\n\020UserMetadataItem"
    "\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"A\n\020StripeS"
    "tatistics\022-\n\010colStats\030\001 \003(\0132\033.orc.proto."
    "ColumnStatistics\"<\n\010Metadata\0220\n\013stripeSt"
    "ats\030\001 \003(\0132\033.orc.proto.StripeStatistics\"\222"
    "\002\n\006Footer\022\024\n\014headerLength\030\001 \001(\004\022\025\n\rconte"
    "ntLength\030\002 \001(\004\022-\n\007stripes\030\003 \003(\0132\034.orc.pr"
    "oto.StripeInformation\022\036\n\005types\030\004 \003(\0132\017.o"
    "rc.proto.Type\022-\n\010metadata\030\005 \003(\0132\033.orc.pr"
    "oto.UserMetadataItem\022\024\n\014numberOfRows\030\006 \001"
    "(\004\022/\n\nstatistics\030\007 \003(\0132\033.orc.proto.Colum"
    "nStatistics\022\026\n\016rowIndexStride\030\010 \001(\r\"\305\001\n\n"
    "PostScript\022\024\n\014footerLength\030\001 \001(\004\022/\n\013comp"
    "ression\030\002 \001(\0162\032.orc.proto.CompressionKin"
    "d\022\034\n\024compressionBlockSize\030\003 \001(\004\022\023\n\007versi"
    "on\030\004 \003(\rB\002\020\001\022\026\n\016metadataLength\030\005 \001(\004\022\025\n\r"
    "writerVersion\030\006 \001(\r\022\016\n\005magic\030\300> \001(\t\"\206\001\n\010"
    "FileTail\022)\n\npostscript\030\001 \001(\0132\025.orc.proto"
    ".PostScript\022!\n\006footer\030\002 \001(\0132\021.orc.proto."
    "Footer\022\022\n\nfileLength\030\003 \001(\004\022\030\n\020postscript"
    "Length\030\004 \001(\004*:\n\017CompressionKind\022\010\n\004NONE\020"
    "\000\022\010\n\004ZLIB\020\001\022\n\n\006SNAPPY\020\002\022\007\n\003LZO\020\003B\"\n org."
    "apache.hadoop.hive.ql.io.orc", 3108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "orc_proto.proto", &protobuf_RegisterTypes);
  IntegerStatistics::default_instance_ = new IntegerStatistics();
  DoubleStatistics::default_instance_ = new DoubleStatistics();
  StringStatistics::default_instance_ = new StringStatistics();
  BucketStatistics::default_instance_ = new BucketStatistics();
  DecimalStatistics::default_instance_ = new DecimalStatistics();
  DateStatistics::default_instance_ = new DateStatistics();
  TimestampStatistics::default_instance_ = new TimestampStatistics();
  BinaryStatistics::default_instance_ = new BinaryStatistics();
  ColumnStatistics::default_instance_ = new ColumnStatistics();
  RowIndexEntry::default_instance_ = new RowIndexEntry();
  RowIndex::default_instance_ = new RowIndex();
  BloomFilter::default_instance_ = new BloomFilter();
  BloomFilterIndex::default_instance_ = new BloomFilterIndex();
  Stream::default_instance_ = new Stream();
  ColumnEncoding::default_instance_ = new ColumnEncoding();
  StripeFooter::default_instance_ = new StripeFooter();
  Type::default_instance_ = new Type();
  StripeInformation::default_instance_ = new StripeInformation();
  UserMetadataItem::default_instance_ = new UserMetadataItem();
  StripeStatistics::default_instance_ = new StripeStatistics();
  Metadata::default_instance_ = new Metadata();
  Footer::default_instance_ = new Footer();
  PostScript::default_instance_ = new PostScript();
  FileTail::default_instance_ = new FileTail();
  IntegerStatistics::default_instance_->InitAsDefaultInstance();
  DoubleStatistics::default_instance_->InitAsDefaultInstance();
  StringStatistics::default_instance_->InitAsDefaultInstance();
  BucketStatistics::default_instance_->InitAsDefaultInstance();
  DecimalStatistics::default_instance_->InitAsDefaultInstance();
  DateStatistics::default_instance_->InitAsDefaultInstance();
  TimestampStatistics::default_instance_->InitAsDefaultInstance();
  BinaryStatistics::default_instance_->InitAsDefaultInstance();
  ColumnStatistics::default_instance_->InitAsDefaultInstance();
  RowIndexEntry::default_instance_->InitAsDefaultInstance();
  RowIndex::default_instance_->InitAsDefaultInstance();
  BloomFilter::default_instance_->InitAsDefaultInstance();
  BloomFilterIndex::default_instance_->InitAsDefaultInstance();
  Stream::default_instance_->InitAsDefaultInstance();
  ColumnEncoding::default_instance_->InitAsDefaultInstance();
  StripeFooter::default_instance_->InitAsDefaultInstance();
  Type::default_instance_->InitAsDefaultInstance();
  StripeInformation::default_instance_->InitAsDefaultInstance();
  UserMetadataItem::default_instance_->InitAsDefaultInstance();
  StripeStatistics::default_instance_->InitAsDefaultInstance();
  Metadata::default_instance_->InitAsDefaultInstance();
  Footer::default_instance_->InitAsDefaultInstance();
  PostScript::default_instance_->InitAsDefaultInstance();
  FileTail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_orc_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_orc_5fproto_2eproto {
  StaticDescriptorInitializer_orc_5fproto_2eproto() {
    protobuf_AddDesc_orc_5fproto_2eproto();
  }
} static_descriptor_initializer_orc_5fproto_2eproto_;
const ::google::protobuf::EnumDescriptor* CompressionKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressionKind_descriptor_;
}
bool CompressionKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int IntegerStatistics::kMinimumFieldNumber;
const int IntegerStatistics::kMaximumFieldNumber;
const int IntegerStatistics::kSumFieldNumber;
#endif  // !_MSC_VER

IntegerStatistics::IntegerStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.IntegerStatistics)
}

void IntegerStatistics::InitAsDefaultInstance() {
}

IntegerStatistics::IntegerStatistics(const IntegerStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.IntegerStatistics)
}

void IntegerStatistics::SharedCtor() {
  _cached_size_ = 0;
  minimum_ = GOOGLE_LONGLONG(0);
  maximum_ = GOOGLE_LONGLONG(0);
  sum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegerStatistics::~IntegerStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.IntegerStatistics)
  SharedDtor();
}

void IntegerStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegerStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegerStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegerStatistics_descriptor_;
}

const IntegerStatistics& IntegerStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

IntegerStatistics* IntegerStatistics::default_instance_ = NULL;

IntegerStatistics* IntegerStatistics::New() const {
  return new IntegerStatistics;
}

void IntegerStatistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IntegerStatistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(minimum_, sum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegerStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.IntegerStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 minimum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &minimum_)));
          set_has_minimum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maximum;
        break;
      }

      // optional sint64 maximum = 2;
      case 2: {
        if (tag == 16) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &maximum_)));
          set_has_maximum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sum;
        break;
      }

      // optional sint64 sum = 3;
      case 3: {
        if (tag == 24) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.IntegerStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.IntegerStatistics)
  return false;
#undef DO_
}

void IntegerStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.IntegerStatistics)
  // optional sint64 minimum = 1;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->minimum(), output);
  }

  // optional sint64 maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->maximum(), output);
  }

  // optional sint64 sum = 3;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.IntegerStatistics)
}

::google::protobuf::uint8* IntegerStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.IntegerStatistics)
  // optional sint64 minimum = 1;
  if (has_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->minimum(), target);
  }

  // optional sint64 maximum = 2;
  if (has_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->maximum(), target);
  }

  // optional sint64 sum = 3;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.IntegerStatistics)
  return target;
}

int IntegerStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 minimum = 1;
    if (has_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->minimum());
    }

    // optional sint64 maximum = 2;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->maximum());
    }

    // optional sint64 sum = 3;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegerStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegerStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegerStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegerStatistics::MergeFrom(const IntegerStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minimum()) {
      set_minimum(from.minimum());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegerStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerStatistics::CopyFrom(const IntegerStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerStatistics::IsInitialized() const {

  return true;
}

void IntegerStatistics::Swap(IntegerStatistics* other) {
  if (other != this) {
    std::swap(minimum_, other->minimum_);
    std::swap(maximum_, other->maximum_);
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegerStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegerStatistics_descriptor_;
  metadata.reflection = IntegerStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleStatistics::kMinimumFieldNumber;
const int DoubleStatistics::kMaximumFieldNumber;
const int DoubleStatistics::kSumFieldNumber;
#endif  // !_MSC_VER

DoubleStatistics::DoubleStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.DoubleStatistics)
}

void DoubleStatistics::InitAsDefaultInstance() {
}

DoubleStatistics::DoubleStatistics(const DoubleStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.DoubleStatistics)
}

void DoubleStatistics::SharedCtor() {
  _cached_size_ = 0;
  minimum_ = 0;
  maximum_ = 0;
  sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleStatistics::~DoubleStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.DoubleStatistics)
  SharedDtor();
}

void DoubleStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleStatistics_descriptor_;
}

const DoubleStatistics& DoubleStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

DoubleStatistics* DoubleStatistics::default_instance_ = NULL;

DoubleStatistics* DoubleStatistics::New() const {
  return new DoubleStatistics;
}

void DoubleStatistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DoubleStatistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(minimum_, sum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.DoubleStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double minimum = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_)));
          set_has_minimum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_maximum;
        break;
      }

      // optional double maximum = 2;
      case 2: {
        if (tag == 17) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximum_)));
          set_has_maximum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_sum;
        break;
      }

      // optional double sum = 3;
      case 3: {
        if (tag == 25) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.DoubleStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.DoubleStatistics)
  return false;
#undef DO_
}

void DoubleStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.DoubleStatistics)
  // optional double minimum = 1;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->minimum(), output);
  }

  // optional double maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maximum(), output);
  }

  // optional double sum = 3;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.DoubleStatistics)
}

::google::protobuf::uint8* DoubleStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.DoubleStatistics)
  // optional double minimum = 1;
  if (has_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->minimum(), target);
  }

  // optional double maximum = 2;
  if (has_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maximum(), target);
  }

  // optional double sum = 3;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.DoubleStatistics)
  return target;
}

int DoubleStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double minimum = 1;
    if (has_minimum()) {
      total_size += 1 + 8;
    }

    // optional double maximum = 2;
    if (has_maximum()) {
      total_size += 1 + 8;
    }

    // optional double sum = 3;
    if (has_sum()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleStatistics::MergeFrom(const DoubleStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minimum()) {
      set_minimum(from.minimum());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleStatistics::CopyFrom(const DoubleStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleStatistics::IsInitialized() const {

  return true;
}

void DoubleStatistics::Swap(DoubleStatistics* other) {
  if (other != this) {
    std::swap(minimum_, other->minimum_);
    std::swap(maximum_, other->maximum_);
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleStatistics_descriptor_;
  metadata.reflection = DoubleStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringStatistics::kMinimumFieldNumber;
const int StringStatistics::kMaximumFieldNumber;
const int StringStatistics::kSumFieldNumber;
#endif  // !_MSC_VER

StringStatistics::StringStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.StringStatistics)
}

void StringStatistics::InitAsDefaultInstance() {
}

StringStatistics::StringStatistics(const StringStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.StringStatistics)
}

void StringStatistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  minimum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maximum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringStatistics::~StringStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.StringStatistics)
  SharedDtor();
}

void StringStatistics::SharedDtor() {
  if (minimum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minimum_;
  }
  if (maximum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete maximum_;
  }
  if (this != default_instance_) {
  }
}

void StringStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringStatistics_descriptor_;
}

const StringStatistics& StringStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

StringStatistics* StringStatistics::default_instance_ = NULL;

StringStatistics* StringStatistics::New() const {
  return new StringStatistics;
}

void StringStatistics::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_minimum()) {
      if (minimum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        minimum_->clear();
      }
    }
    if (has_maximum()) {
      if (maximum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        maximum_->clear();
      }
    }
    sum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.StringStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string minimum = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minimum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->minimum().data(), this->minimum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "minimum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_maximum;
        break;
      }

      // optional string maximum = 2;
      case 2: {
        if (tag == 18) {
         parse_maximum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maximum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->maximum().data(), this->maximum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "maximum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sum;
        break;
      }

      // optional sint64 sum = 3;
      case 3: {
        if (tag == 24) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.StringStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.StringStatistics)
  return false;
#undef DO_
}

void StringStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.StringStatistics)
  // optional string minimum = 1;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->minimum().data(), this->minimum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "minimum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->minimum(), output);
  }

  // optional string maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maximum().data(), this->maximum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "maximum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->maximum(), output);
  }

  // optional sint64 sum = 3;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.StringStatistics)
}

::google::protobuf::uint8* StringStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.StringStatistics)
  // optional string minimum = 1;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->minimum().data(), this->minimum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "minimum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->minimum(), target);
  }

  // optional string maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maximum().data(), this->maximum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "maximum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->maximum(), target);
  }

  // optional sint64 sum = 3;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.StringStatistics)
  return target;
}

int StringStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string minimum = 1;
    if (has_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minimum());
    }

    // optional string maximum = 2;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maximum());
    }

    // optional sint64 sum = 3;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringStatistics::MergeFrom(const StringStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minimum()) {
      set_minimum(from.minimum());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringStatistics::CopyFrom(const StringStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringStatistics::IsInitialized() const {

  return true;
}

void StringStatistics::Swap(StringStatistics* other) {
  if (other != this) {
    std::swap(minimum_, other->minimum_);
    std::swap(maximum_, other->maximum_);
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringStatistics_descriptor_;
  metadata.reflection = StringStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BucketStatistics::kCountFieldNumber;
#endif  // !_MSC_VER

BucketStatistics::BucketStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.BucketStatistics)
}

void BucketStatistics::InitAsDefaultInstance() {
}

BucketStatistics::BucketStatistics(const BucketStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.BucketStatistics)
}

void BucketStatistics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BucketStatistics::~BucketStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.BucketStatistics)
  SharedDtor();
}

void BucketStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BucketStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BucketStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BucketStatistics_descriptor_;
}

const BucketStatistics& BucketStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

BucketStatistics* BucketStatistics::default_instance_ = NULL;

BucketStatistics* BucketStatistics::New() const {
  return new BucketStatistics;
}

void BucketStatistics::Clear() {
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BucketStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.BucketStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 count = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_count())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.BucketStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.BucketStatistics)
  return false;
#undef DO_
}

void BucketStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.BucketStatistics)
  // repeated uint64 count = 1 [packed = true];
  if (this->count_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_count_cached_byte_size_);
  }
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.BucketStatistics)
}

::google::protobuf::uint8* BucketStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.BucketStatistics)
  // repeated uint64 count = 1 [packed = true];
  if (this->count_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _count_cached_byte_size_, target);
  }
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.BucketStatistics)
  return target;
}

int BucketStatistics::ByteSize() const {
  int total_size = 0;

  // repeated uint64 count = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->count(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _count_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BucketStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BucketStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BucketStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BucketStatistics::MergeFrom(const BucketStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  count_.MergeFrom(from.count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BucketStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BucketStatistics::CopyFrom(const BucketStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketStatistics::IsInitialized() const {

  return true;
}

void BucketStatistics::Swap(BucketStatistics* other) {
  if (other != this) {
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BucketStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BucketStatistics_descriptor_;
  metadata.reflection = BucketStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecimalStatistics::kMinimumFieldNumber;
const int DecimalStatistics::kMaximumFieldNumber;
const int DecimalStatistics::kSumFieldNumber;
#endif  // !_MSC_VER

DecimalStatistics::DecimalStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.DecimalStatistics)
}

void DecimalStatistics::InitAsDefaultInstance() {
}

DecimalStatistics::DecimalStatistics(const DecimalStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.DecimalStatistics)
}

void DecimalStatistics::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  minimum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maximum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecimalStatistics::~DecimalStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.DecimalStatistics)
  SharedDtor();
}

void DecimalStatistics::SharedDtor() {
  if (minimum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minimum_;
  }
  if (maximum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete maximum_;
  }
  if (sum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_;
  }
  if (this != default_instance_) {
  }
}

void DecimalStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecimalStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecimalStatistics_descriptor_;
}

const DecimalStatistics& DecimalStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

DecimalStatistics* DecimalStatistics::default_instance_ = NULL;

DecimalStatistics* DecimalStatistics::New() const {
  return new DecimalStatistics;
}

void DecimalStatistics::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_minimum()) {
      if (minimum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        minimum_->clear();
      }
    }
    if (has_maximum()) {
      if (maximum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        maximum_->clear();
      }
    }
    if (has_sum()) {
      if (sum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecimalStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.DecimalStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string minimum = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minimum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->minimum().data(), this->minimum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "minimum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_maximum;
        break;
      }

      // optional string maximum = 2;
      case 2: {
        if (tag == 18) {
         parse_maximum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maximum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->maximum().data(), this->maximum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "maximum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sum;
        break;
      }

      // optional string sum = 3;
      case 3: {
        if (tag == 26) {
         parse_sum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sum().data(), this->sum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.DecimalStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.DecimalStatistics)
  return false;
#undef DO_
}

void DecimalStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.DecimalStatistics)
  // optional string minimum = 1;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->minimum().data(), this->minimum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "minimum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->minimum(), output);
  }

  // optional string maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maximum().data(), this->maximum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "maximum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->maximum(), output);
  }

  // optional string sum = 3;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sum().data(), this->sum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.DecimalStatistics)
}

::google::protobuf::uint8* DecimalStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.DecimalStatistics)
  // optional string minimum = 1;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->minimum().data(), this->minimum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "minimum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->minimum(), target);
  }

  // optional string maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maximum().data(), this->maximum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "maximum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->maximum(), target);
  }

  // optional string sum = 3;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sum().data(), this->sum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.DecimalStatistics)
  return target;
}

int DecimalStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string minimum = 1;
    if (has_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minimum());
    }

    // optional string maximum = 2;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maximum());
    }

    // optional string sum = 3;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecimalStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecimalStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecimalStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecimalStatistics::MergeFrom(const DecimalStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minimum()) {
      set_minimum(from.minimum());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecimalStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecimalStatistics::CopyFrom(const DecimalStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecimalStatistics::IsInitialized() const {

  return true;
}

void DecimalStatistics::Swap(DecimalStatistics* other) {
  if (other != this) {
    std::swap(minimum_, other->minimum_);
    std::swap(maximum_, other->maximum_);
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecimalStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecimalStatistics_descriptor_;
  metadata.reflection = DecimalStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DateStatistics::kMinimumFieldNumber;
const int DateStatistics::kMaximumFieldNumber;
#endif  // !_MSC_VER

DateStatistics::DateStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.DateStatistics)
}

void DateStatistics::InitAsDefaultInstance() {
}

DateStatistics::DateStatistics(const DateStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.DateStatistics)
}

void DateStatistics::SharedCtor() {
  _cached_size_ = 0;
  minimum_ = 0;
  maximum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateStatistics::~DateStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.DateStatistics)
  SharedDtor();
}

void DateStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DateStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateStatistics_descriptor_;
}

const DateStatistics& DateStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

DateStatistics* DateStatistics::default_instance_ = NULL;

DateStatistics* DateStatistics::New() const {
  return new DateStatistics;
}

void DateStatistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DateStatistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(minimum_, maximum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DateStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.DateStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 minimum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &minimum_)));
          set_has_minimum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maximum;
        break;
      }

      // optional sint32 maximum = 2;
      case 2: {
        if (tag == 16) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maximum_)));
          set_has_maximum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.DateStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.DateStatistics)
  return false;
#undef DO_
}

void DateStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.DateStatistics)
  // optional sint32 minimum = 1;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->minimum(), output);
  }

  // optional sint32 maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->maximum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.DateStatistics)
}

::google::protobuf::uint8* DateStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.DateStatistics)
  // optional sint32 minimum = 1;
  if (has_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->minimum(), target);
  }

  // optional sint32 maximum = 2;
  if (has_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->maximum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.DateStatistics)
  return target;
}

int DateStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 minimum = 1;
    if (has_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->minimum());
    }

    // optional sint32 maximum = 2;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maximum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DateStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DateStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DateStatistics::MergeFrom(const DateStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minimum()) {
      set_minimum(from.minimum());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DateStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateStatistics::CopyFrom(const DateStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateStatistics::IsInitialized() const {

  return true;
}

void DateStatistics::Swap(DateStatistics* other) {
  if (other != this) {
    std::swap(minimum_, other->minimum_);
    std::swap(maximum_, other->maximum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DateStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateStatistics_descriptor_;
  metadata.reflection = DateStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimestampStatistics::kMinimumFieldNumber;
const int TimestampStatistics::kMaximumFieldNumber;
#endif  // !_MSC_VER

TimestampStatistics::TimestampStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.TimestampStatistics)
}

void TimestampStatistics::InitAsDefaultInstance() {
}

TimestampStatistics::TimestampStatistics(const TimestampStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.TimestampStatistics)
}

void TimestampStatistics::SharedCtor() {
  _cached_size_ = 0;
  minimum_ = GOOGLE_LONGLONG(0);
  maximum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimestampStatistics::~TimestampStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.TimestampStatistics)
  SharedDtor();
}

void TimestampStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimestampStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimestampStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimestampStatistics_descriptor_;
}

const TimestampStatistics& TimestampStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

TimestampStatistics* TimestampStatistics::default_instance_ = NULL;

TimestampStatistics* TimestampStatistics::New() const {
  return new TimestampStatistics;
}

void TimestampStatistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimestampStatistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(minimum_, maximum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimestampStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.TimestampStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 minimum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &minimum_)));
          set_has_minimum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maximum;
        break;
      }

      // optional sint64 maximum = 2;
      case 2: {
        if (tag == 16) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &maximum_)));
          set_has_maximum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.TimestampStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.TimestampStatistics)
  return false;
#undef DO_
}

void TimestampStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.TimestampStatistics)
  // optional sint64 minimum = 1;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->minimum(), output);
  }

  // optional sint64 maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->maximum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.TimestampStatistics)
}

::google::protobuf::uint8* TimestampStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.TimestampStatistics)
  // optional sint64 minimum = 1;
  if (has_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->minimum(), target);
  }

  // optional sint64 maximum = 2;
  if (has_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->maximum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.TimestampStatistics)
  return target;
}

int TimestampStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 minimum = 1;
    if (has_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->minimum());
    }

    // optional sint64 maximum = 2;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->maximum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimestampStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimestampStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimestampStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimestampStatistics::MergeFrom(const TimestampStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minimum()) {
      set_minimum(from.minimum());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimestampStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampStatistics::CopyFrom(const TimestampStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampStatistics::IsInitialized() const {

  return true;
}

void TimestampStatistics::Swap(TimestampStatistics* other) {
  if (other != this) {
    std::swap(minimum_, other->minimum_);
    std::swap(maximum_, other->maximum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimestampStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimestampStatistics_descriptor_;
  metadata.reflection = TimestampStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryStatistics::kSumFieldNumber;
#endif  // !_MSC_VER

BinaryStatistics::BinaryStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.BinaryStatistics)
}

void BinaryStatistics::InitAsDefaultInstance() {
}

BinaryStatistics::BinaryStatistics(const BinaryStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.BinaryStatistics)
}

void BinaryStatistics::SharedCtor() {
  _cached_size_ = 0;
  sum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryStatistics::~BinaryStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.BinaryStatistics)
  SharedDtor();
}

void BinaryStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryStatistics_descriptor_;
}

const BinaryStatistics& BinaryStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

BinaryStatistics* BinaryStatistics::default_instance_ = NULL;

BinaryStatistics* BinaryStatistics::New() const {
  return new BinaryStatistics;
}

void BinaryStatistics::Clear() {
  sum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.BinaryStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 sum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.BinaryStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.BinaryStatistics)
  return false;
#undef DO_
}

void BinaryStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.BinaryStatistics)
  // optional sint64 sum = 1;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.BinaryStatistics)
}

::google::protobuf::uint8* BinaryStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.BinaryStatistics)
  // optional sint64 sum = 1;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.BinaryStatistics)
  return target;
}

int BinaryStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 sum = 1;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryStatistics::MergeFrom(const BinaryStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryStatistics::CopyFrom(const BinaryStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryStatistics::IsInitialized() const {

  return true;
}

void BinaryStatistics::Swap(BinaryStatistics* other) {
  if (other != this) {
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryStatistics_descriptor_;
  metadata.reflection = BinaryStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnStatistics::kNumberOfValuesFieldNumber;
const int ColumnStatistics::kIntStatisticsFieldNumber;
const int ColumnStatistics::kDoubleStatisticsFieldNumber;
const int ColumnStatistics::kStringStatisticsFieldNumber;
const int ColumnStatistics::kBucketStatisticsFieldNumber;
const int ColumnStatistics::kDecimalStatisticsFieldNumber;
const int ColumnStatistics::kDateStatisticsFieldNumber;
const int ColumnStatistics::kBinaryStatisticsFieldNumber;
const int ColumnStatistics::kTimestampStatisticsFieldNumber;
const int ColumnStatistics::kHasNullFieldNumber;
#endif  // !_MSC_VER

ColumnStatistics::ColumnStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.ColumnStatistics)
}

void ColumnStatistics::InitAsDefaultInstance() {
  intstatistics_ = const_cast< ::orc::proto::IntegerStatistics*>(&::orc::proto::IntegerStatistics::default_instance());
  doublestatistics_ = const_cast< ::orc::proto::DoubleStatistics*>(&::orc::proto::DoubleStatistics::default_instance());
  stringstatistics_ = const_cast< ::orc::proto::StringStatistics*>(&::orc::proto::StringStatistics::default_instance());
  bucketstatistics_ = const_cast< ::orc::proto::BucketStatistics*>(&::orc::proto::BucketStatistics::default_instance());
  decimalstatistics_ = const_cast< ::orc::proto::DecimalStatistics*>(&::orc::proto::DecimalStatistics::default_instance());
  datestatistics_ = const_cast< ::orc::proto::DateStatistics*>(&::orc::proto::DateStatistics::default_instance());
  binarystatistics_ = const_cast< ::orc::proto::BinaryStatistics*>(&::orc::proto::BinaryStatistics::default_instance());
  timestampstatistics_ = const_cast< ::orc::proto::TimestampStatistics*>(&::orc::proto::TimestampStatistics::default_instance());
}

ColumnStatistics::ColumnStatistics(const ColumnStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.ColumnStatistics)
}

void ColumnStatistics::SharedCtor() {
  _cached_size_ = 0;
  numberofvalues_ = GOOGLE_ULONGLONG(0);
  intstatistics_ = NULL;
  doublestatistics_ = NULL;
  stringstatistics_ = NULL;
  bucketstatistics_ = NULL;
  decimalstatistics_ = NULL;
  datestatistics_ = NULL;
  binarystatistics_ = NULL;
  timestampstatistics_ = NULL;
  hasnull_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnStatistics::~ColumnStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.ColumnStatistics)
  SharedDtor();
}

void ColumnStatistics::SharedDtor() {
  if (this != default_instance_) {
    delete intstatistics_;
    delete doublestatistics_;
    delete stringstatistics_;
    delete bucketstatistics_;
    delete decimalstatistics_;
    delete datestatistics_;
    delete binarystatistics_;
    delete timestampstatistics_;
  }
}

void ColumnStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnStatistics_descriptor_;
}

const ColumnStatistics& ColumnStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

ColumnStatistics* ColumnStatistics::default_instance_ = NULL;

ColumnStatistics* ColumnStatistics::New() const {
  return new ColumnStatistics;
}

void ColumnStatistics::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    numberofvalues_ = GOOGLE_ULONGLONG(0);
    if (has_intstatistics()) {
      if (intstatistics_ != NULL) intstatistics_->::orc::proto::IntegerStatistics::Clear();
    }
    if (has_doublestatistics()) {
      if (doublestatistics_ != NULL) doublestatistics_->::orc::proto::DoubleStatistics::Clear();
    }
    if (has_stringstatistics()) {
      if (stringstatistics_ != NULL) stringstatistics_->::orc::proto::StringStatistics::Clear();
    }
    if (has_bucketstatistics()) {
      if (bucketstatistics_ != NULL) bucketstatistics_->::orc::proto::BucketStatistics::Clear();
    }
    if (has_decimalstatistics()) {
      if (decimalstatistics_ != NULL) decimalstatistics_->::orc::proto::DecimalStatistics::Clear();
    }
    if (has_datestatistics()) {
      if (datestatistics_ != NULL) datestatistics_->::orc::proto::DateStatistics::Clear();
    }
    if (has_binarystatistics()) {
      if (binarystatistics_ != NULL) binarystatistics_->::orc::proto::BinaryStatistics::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_timestampstatistics()) {
      if (timestampstatistics_ != NULL) timestampstatistics_->::orc::proto::TimestampStatistics::Clear();
    }
    hasnull_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.ColumnStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 numberOfValues = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &numberofvalues_)));
          set_has_numberofvalues();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_intStatistics;
        break;
      }

      // optional .orc.proto.IntegerStatistics intStatistics = 2;
      case 2: {
        if (tag == 18) {
         parse_intStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intstatistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_doubleStatistics;
        break;
      }

      // optional .orc.proto.DoubleStatistics doubleStatistics = 3;
      case 3: {
        if (tag == 26) {
         parse_doubleStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doublestatistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stringStatistics;
        break;
      }

      // optional .orc.proto.StringStatistics stringStatistics = 4;
      case 4: {
        if (tag == 34) {
         parse_stringStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringstatistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bucketStatistics;
        break;
      }

      // optional .orc.proto.BucketStatistics bucketStatistics = 5;
      case 5: {
        if (tag == 42) {
         parse_bucketStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bucketstatistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_decimalStatistics;
        break;
      }

      // optional .orc.proto.DecimalStatistics decimalStatistics = 6;
      case 6: {
        if (tag == 50) {
         parse_decimalStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decimalstatistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dateStatistics;
        break;
      }

      // optional .orc.proto.DateStatistics dateStatistics = 7;
      case 7: {
        if (tag == 58) {
         parse_dateStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datestatistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_binaryStatistics;
        break;
      }

      // optional .orc.proto.BinaryStatistics binaryStatistics = 8;
      case 8: {
        if (tag == 66) {
         parse_binaryStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_binarystatistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_timestampStatistics;
        break;
      }

      // optional .orc.proto.TimestampStatistics timestampStatistics = 9;
      case 9: {
        if (tag == 74) {
         parse_timestampStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestampstatistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hasNull;
        break;
      }

      // optional bool hasNull = 10;
      case 10: {
        if (tag == 80) {
         parse_hasNull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasnull_)));
          set_has_hasnull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.ColumnStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.ColumnStatistics)
  return false;
#undef DO_
}

void ColumnStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.ColumnStatistics)
  // optional uint64 numberOfValues = 1;
  if (has_numberofvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->numberofvalues(), output);
  }

  // optional .orc.proto.IntegerStatistics intStatistics = 2;
  if (has_intstatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->intstatistics(), output);
  }

  // optional .orc.proto.DoubleStatistics doubleStatistics = 3;
  if (has_doublestatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->doublestatistics(), output);
  }

  // optional .orc.proto.StringStatistics stringStatistics = 4;
  if (has_stringstatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stringstatistics(), output);
  }

  // optional .orc.proto.BucketStatistics bucketStatistics = 5;
  if (has_bucketstatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bucketstatistics(), output);
  }

  // optional .orc.proto.DecimalStatistics decimalStatistics = 6;
  if (has_decimalstatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->decimalstatistics(), output);
  }

  // optional .orc.proto.DateStatistics dateStatistics = 7;
  if (has_datestatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->datestatistics(), output);
  }

  // optional .orc.proto.BinaryStatistics binaryStatistics = 8;
  if (has_binarystatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->binarystatistics(), output);
  }

  // optional .orc.proto.TimestampStatistics timestampStatistics = 9;
  if (has_timestampstatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->timestampstatistics(), output);
  }

  // optional bool hasNull = 10;
  if (has_hasnull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hasnull(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.ColumnStatistics)
}

::google::protobuf::uint8* ColumnStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.ColumnStatistics)
  // optional uint64 numberOfValues = 1;
  if (has_numberofvalues()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->numberofvalues(), target);
  }

  // optional .orc.proto.IntegerStatistics intStatistics = 2;
  if (has_intstatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->intstatistics(), target);
  }

  // optional .orc.proto.DoubleStatistics doubleStatistics = 3;
  if (has_doublestatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->doublestatistics(), target);
  }

  // optional .orc.proto.StringStatistics stringStatistics = 4;
  if (has_stringstatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stringstatistics(), target);
  }

  // optional .orc.proto.BucketStatistics bucketStatistics = 5;
  if (has_bucketstatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bucketstatistics(), target);
  }

  // optional .orc.proto.DecimalStatistics decimalStatistics = 6;
  if (has_decimalstatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->decimalstatistics(), target);
  }

  // optional .orc.proto.DateStatistics dateStatistics = 7;
  if (has_datestatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->datestatistics(), target);
  }

  // optional .orc.proto.BinaryStatistics binaryStatistics = 8;
  if (has_binarystatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->binarystatistics(), target);
  }

  // optional .orc.proto.TimestampStatistics timestampStatistics = 9;
  if (has_timestampstatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->timestampstatistics(), target);
  }

  // optional bool hasNull = 10;
  if (has_hasnull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->hasnull(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.ColumnStatistics)
  return target;
}

int ColumnStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 numberOfValues = 1;
    if (has_numberofvalues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->numberofvalues());
    }

    // optional .orc.proto.IntegerStatistics intStatistics = 2;
    if (has_intstatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intstatistics());
    }

    // optional .orc.proto.DoubleStatistics doubleStatistics = 3;
    if (has_doublestatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doublestatistics());
    }

    // optional .orc.proto.StringStatistics stringStatistics = 4;
    if (has_stringstatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stringstatistics());
    }

    // optional .orc.proto.BucketStatistics bucketStatistics = 5;
    if (has_bucketstatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bucketstatistics());
    }

    // optional .orc.proto.DecimalStatistics decimalStatistics = 6;
    if (has_decimalstatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decimalstatistics());
    }

    // optional .orc.proto.DateStatistics dateStatistics = 7;
    if (has_datestatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datestatistics());
    }

    // optional .orc.proto.BinaryStatistics binaryStatistics = 8;
    if (has_binarystatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->binarystatistics());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .orc.proto.TimestampStatistics timestampStatistics = 9;
    if (has_timestampstatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestampstatistics());
    }

    // optional bool hasNull = 10;
    if (has_hasnull()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnStatistics::MergeFrom(const ColumnStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numberofvalues()) {
      set_numberofvalues(from.numberofvalues());
    }
    if (from.has_intstatistics()) {
      mutable_intstatistics()->::orc::proto::IntegerStatistics::MergeFrom(from.intstatistics());
    }
    if (from.has_doublestatistics()) {
      mutable_doublestatistics()->::orc::proto::DoubleStatistics::MergeFrom(from.doublestatistics());
    }
    if (from.has_stringstatistics()) {
      mutable_stringstatistics()->::orc::proto::StringStatistics::MergeFrom(from.stringstatistics());
    }
    if (from.has_bucketstatistics()) {
      mutable_bucketstatistics()->::orc::proto::BucketStatistics::MergeFrom(from.bucketstatistics());
    }
    if (from.has_decimalstatistics()) {
      mutable_decimalstatistics()->::orc::proto::DecimalStatistics::MergeFrom(from.decimalstatistics());
    }
    if (from.has_datestatistics()) {
      mutable_datestatistics()->::orc::proto::DateStatistics::MergeFrom(from.datestatistics());
    }
    if (from.has_binarystatistics()) {
      mutable_binarystatistics()->::orc::proto::BinaryStatistics::MergeFrom(from.binarystatistics());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestampstatistics()) {
      mutable_timestampstatistics()->::orc::proto::TimestampStatistics::MergeFrom(from.timestampstatistics());
    }
    if (from.has_hasnull()) {
      set_hasnull(from.hasnull());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnStatistics::CopyFrom(const ColumnStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStatistics::IsInitialized() const {

  return true;
}

void ColumnStatistics::Swap(ColumnStatistics* other) {
  if (other != this) {
    std::swap(numberofvalues_, other->numberofvalues_);
    std::swap(intstatistics_, other->intstatistics_);
    std::swap(doublestatistics_, other->doublestatistics_);
    std::swap(stringstatistics_, other->stringstatistics_);
    std::swap(bucketstatistics_, other->bucketstatistics_);
    std::swap(decimalstatistics_, other->decimalstatistics_);
    std::swap(datestatistics_, other->datestatistics_);
    std::swap(binarystatistics_, other->binarystatistics_);
    std::swap(timestampstatistics_, other->timestampstatistics_);
    std::swap(hasnull_, other->hasnull_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnStatistics_descriptor_;
  metadata.reflection = ColumnStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RowIndexEntry::kPositionsFieldNumber;
const int RowIndexEntry::kStatisticsFieldNumber;
#endif  // !_MSC_VER

RowIndexEntry::RowIndexEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.RowIndexEntry)
}

void RowIndexEntry::InitAsDefaultInstance() {
  statistics_ = const_cast< ::orc::proto::ColumnStatistics*>(&::orc::proto::ColumnStatistics::default_instance());
}

RowIndexEntry::RowIndexEntry(const RowIndexEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.RowIndexEntry)
}

void RowIndexEntry::SharedCtor() {
  _cached_size_ = 0;
  statistics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowIndexEntry::~RowIndexEntry() {
  // @@protoc_insertion_point(destructor:orc.proto.RowIndexEntry)
  SharedDtor();
}

void RowIndexEntry::SharedDtor() {
  if (this != default_instance_) {
    delete statistics_;
  }
}

void RowIndexEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowIndexEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowIndexEntry_descriptor_;
}

const RowIndexEntry& RowIndexEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

RowIndexEntry* RowIndexEntry::default_instance_ = NULL;

RowIndexEntry* RowIndexEntry::New() const {
  return new RowIndexEntry;
}

void RowIndexEntry::Clear() {
  if (has_statistics()) {
    if (statistics_ != NULL) statistics_->::orc::proto::ColumnStatistics::Clear();
  }
  positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowIndexEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.RowIndexEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 positions = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_positions())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_positions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statistics;
        break;
      }

      // optional .orc.proto.ColumnStatistics statistics = 2;
      case 2: {
        if (tag == 18) {
         parse_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.RowIndexEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.RowIndexEntry)
  return false;
#undef DO_
}

void RowIndexEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.RowIndexEntry)
  // repeated uint64 positions = 1 [packed = true];
  if (this->positions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_positions_cached_byte_size_);
  }
  for (int i = 0; i < this->positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->positions(i), output);
  }

  // optional .orc.proto.ColumnStatistics statistics = 2;
  if (has_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statistics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.RowIndexEntry)
}

::google::protobuf::uint8* RowIndexEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.RowIndexEntry)
  // repeated uint64 positions = 1 [packed = true];
  if (this->positions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _positions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->positions(i), target);
  }

  // optional .orc.proto.ColumnStatistics statistics = 2;
  if (has_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statistics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.RowIndexEntry)
  return target;
}

int RowIndexEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .orc.proto.ColumnStatistics statistics = 2;
    if (has_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statistics());
    }

  }
  // repeated uint64 positions = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->positions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->positions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _positions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowIndexEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowIndexEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowIndexEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowIndexEntry::MergeFrom(const RowIndexEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  positions_.MergeFrom(from.positions_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_statistics()) {
      mutable_statistics()->::orc::proto::ColumnStatistics::MergeFrom(from.statistics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowIndexEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowIndexEntry::CopyFrom(const RowIndexEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowIndexEntry::IsInitialized() const {

  return true;
}

void RowIndexEntry::Swap(RowIndexEntry* other) {
  if (other != this) {
    positions_.Swap(&other->positions_);
    std::swap(statistics_, other->statistics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowIndexEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowIndexEntry_descriptor_;
  metadata.reflection = RowIndexEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RowIndex::kEntryFieldNumber;
#endif  // !_MSC_VER

RowIndex::RowIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.RowIndex)
}

void RowIndex::InitAsDefaultInstance() {
}

RowIndex::RowIndex(const RowIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.RowIndex)
}

void RowIndex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowIndex::~RowIndex() {
  // @@protoc_insertion_point(destructor:orc.proto.RowIndex)
  SharedDtor();
}

void RowIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RowIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowIndex_descriptor_;
}

const RowIndex& RowIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

RowIndex* RowIndex::default_instance_ = NULL;

RowIndex* RowIndex::New() const {
  return new RowIndex;
}

void RowIndex::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.RowIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .orc.proto.RowIndexEntry entry = 1;
      case 1: {
        if (tag == 10) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.RowIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.RowIndex)
  return false;
#undef DO_
}

void RowIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.RowIndex)
  // repeated .orc.proto.RowIndexEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.RowIndex)
}

::google::protobuf::uint8* RowIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.RowIndex)
  // repeated .orc.proto.RowIndexEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.RowIndex)
  return target;
}

int RowIndex::ByteSize() const {
  int total_size = 0;

  // repeated .orc.proto.RowIndexEntry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowIndex::MergeFrom(const RowIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowIndex::CopyFrom(const RowIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowIndex::IsInitialized() const {

  return true;
}

void RowIndex::Swap(RowIndex* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowIndex_descriptor_;
  metadata.reflection = RowIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BloomFilter::kNumHashFunctionsFieldNumber;
const int BloomFilter::kBitsetFieldNumber;
#endif  // !_MSC_VER

BloomFilter::BloomFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.BloomFilter)
}

void BloomFilter::InitAsDefaultInstance() {
}

BloomFilter::BloomFilter(const BloomFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.BloomFilter)
}

void BloomFilter::SharedCtor() {
  _cached_size_ = 0;
  numhashfunctions_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloomFilter::~BloomFilter() {
  // @@protoc_insertion_point(destructor:orc.proto.BloomFilter)
  SharedDtor();
}

void BloomFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BloomFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloomFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloomFilter_descriptor_;
}

const BloomFilter& BloomFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

BloomFilter* BloomFilter::default_instance_ = NULL;

BloomFilter* BloomFilter::New() const {
  return new BloomFilter;
}

void BloomFilter::Clear() {
  numhashfunctions_ = 0u;
  bitset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloomFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.BloomFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 numHashFunctions = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numhashfunctions_)));
          set_has_numhashfunctions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_bitset;
        break;
      }

      // repeated fixed64 bitset = 2;
      case 2: {
        if (tag == 17) {
         parse_bitset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_bitset())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_bitset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_bitset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.BloomFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.BloomFilter)
  return false;
#undef DO_
}

void BloomFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.BloomFilter)
  // optional uint32 numHashFunctions = 1;
  if (has_numhashfunctions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->numhashfunctions(), output);
  }

  // repeated fixed64 bitset = 2;
  for (int i = 0; i < this->bitset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->bitset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.BloomFilter)
}

::google::protobuf::uint8* BloomFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.BloomFilter)
  // optional uint32 numHashFunctions = 1;
  if (has_numhashfunctions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->numhashfunctions(), target);
  }

  // repeated fixed64 bitset = 2;
  for (int i = 0; i < this->bitset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->bitset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.BloomFilter)
  return target;
}

int BloomFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 numHashFunctions = 1;
    if (has_numhashfunctions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numhashfunctions());
    }

  }
  // repeated fixed64 bitset = 2;
  {
    int data_size = 0;
    data_size = 8 * this->bitset_size();
    total_size += 1 * this->bitset_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloomFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloomFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloomFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloomFilter::MergeFrom(const BloomFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  bitset_.MergeFrom(from.bitset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numhashfunctions()) {
      set_numhashfunctions(from.numhashfunctions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloomFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloomFilter::CopyFrom(const BloomFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomFilter::IsInitialized() const {

  return true;
}

void BloomFilter::Swap(BloomFilter* other) {
  if (other != this) {
    std::swap(numhashfunctions_, other->numhashfunctions_);
    bitset_.Swap(&other->bitset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloomFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloomFilter_descriptor_;
  metadata.reflection = BloomFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BloomFilterIndex::kBloomFilterFieldNumber;
#endif  // !_MSC_VER

BloomFilterIndex::BloomFilterIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.BloomFilterIndex)
}

void BloomFilterIndex::InitAsDefaultInstance() {
}

BloomFilterIndex::BloomFilterIndex(const BloomFilterIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.BloomFilterIndex)
}

void BloomFilterIndex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloomFilterIndex::~BloomFilterIndex() {
  // @@protoc_insertion_point(destructor:orc.proto.BloomFilterIndex)
  SharedDtor();
}

void BloomFilterIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BloomFilterIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloomFilterIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloomFilterIndex_descriptor_;
}

const BloomFilterIndex& BloomFilterIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

BloomFilterIndex* BloomFilterIndex::default_instance_ = NULL;

BloomFilterIndex* BloomFilterIndex::New() const {
  return new BloomFilterIndex;
}

void BloomFilterIndex::Clear() {
  bloomfilter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloomFilterIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.BloomFilterIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .orc.proto.BloomFilter bloomFilter = 1;
      case 1: {
        if (tag == 10) {
         parse_bloomFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bloomfilter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bloomFilter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.BloomFilterIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.BloomFilterIndex)
  return false;
#undef DO_
}

void BloomFilterIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.BloomFilterIndex)
  // repeated .orc.proto.BloomFilter bloomFilter = 1;
  for (int i = 0; i < this->bloomfilter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bloomfilter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.BloomFilterIndex)
}

::google::protobuf::uint8* BloomFilterIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.BloomFilterIndex)
  // repeated .orc.proto.BloomFilter bloomFilter = 1;
  for (int i = 0; i < this->bloomfilter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bloomfilter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.BloomFilterIndex)
  return target;
}

int BloomFilterIndex::ByteSize() const {
  int total_size = 0;

  // repeated .orc.proto.BloomFilter bloomFilter = 1;
  total_size += 1 * this->bloomfilter_size();
  for (int i = 0; i < this->bloomfilter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bloomfilter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloomFilterIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloomFilterIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloomFilterIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloomFilterIndex::MergeFrom(const BloomFilterIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  bloomfilter_.MergeFrom(from.bloomfilter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloomFilterIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloomFilterIndex::CopyFrom(const BloomFilterIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomFilterIndex::IsInitialized() const {

  return true;
}

void BloomFilterIndex::Swap(BloomFilterIndex* other) {
  if (other != this) {
    bloomfilter_.Swap(&other->bloomfilter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloomFilterIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloomFilterIndex_descriptor_;
  metadata.reflection = BloomFilterIndex_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Stream_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_Kind_descriptor_;
}
bool Stream_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Stream_Kind Stream::PRESENT;
const Stream_Kind Stream::DATA;
const Stream_Kind Stream::LENGTH;
const Stream_Kind Stream::DICTIONARY_DATA;
const Stream_Kind Stream::DICTIONARY_COUNT;
const Stream_Kind Stream::SECONDARY;
const Stream_Kind Stream::ROW_INDEX;
const Stream_Kind Stream::BLOOM_FILTER;
const Stream_Kind Stream::Kind_MIN;
const Stream_Kind Stream::Kind_MAX;
const int Stream::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Stream::kKindFieldNumber;
const int Stream::kColumnFieldNumber;
const int Stream::kLengthFieldNumber;
#endif  // !_MSC_VER

Stream::Stream()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.Stream)
}

void Stream::InitAsDefaultInstance() {
}

Stream::Stream(const Stream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.Stream)
}

void Stream::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  column_ = 0u;
  length_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:orc.proto.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_descriptor_;
}

const Stream& Stream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

Stream* Stream::default_instance_ = NULL;

Stream* Stream::New() const {
  return new Stream;
}

void Stream::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Stream*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kind_, length_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.Stream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .orc.proto.Stream.Kind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::orc::proto::Stream_Kind_IsValid(value)) {
            set_kind(static_cast< ::orc::proto::Stream_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_column;
        break;
      }

      // optional uint32 column = 2;
      case 2: {
        if (tag == 16) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // optional uint64 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.Stream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.Stream)
  return false;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.Stream)
  // optional .orc.proto.Stream.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional uint32 column = 2;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->column(), output);
  }

  // optional uint64 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.Stream)
}

::google::protobuf::uint8* Stream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.Stream)
  // optional .orc.proto.Stream.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional uint32 column = 2;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->column(), target);
  }

  // optional uint64 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.Stream)
  return target;
}

int Stream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .orc.proto.Stream.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional uint32 column = 2;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // optional uint64 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {

  return true;
}

void Stream::Swap(Stream* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(column_, other->column_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stream_descriptor_;
  metadata.reflection = Stream_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ColumnEncoding_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnEncoding_Kind_descriptor_;
}
bool ColumnEncoding_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ColumnEncoding_Kind ColumnEncoding::DIRECT;
const ColumnEncoding_Kind ColumnEncoding::DICTIONARY;
const ColumnEncoding_Kind ColumnEncoding::DIRECT_V2;
const ColumnEncoding_Kind ColumnEncoding::DICTIONARY_V2;
const ColumnEncoding_Kind ColumnEncoding::Kind_MIN;
const ColumnEncoding_Kind ColumnEncoding::Kind_MAX;
const int ColumnEncoding::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ColumnEncoding::kKindFieldNumber;
const int ColumnEncoding::kDictionarySizeFieldNumber;
#endif  // !_MSC_VER

ColumnEncoding::ColumnEncoding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.ColumnEncoding)
}

void ColumnEncoding::InitAsDefaultInstance() {
}

ColumnEncoding::ColumnEncoding(const ColumnEncoding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.ColumnEncoding)
}

void ColumnEncoding::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  dictionarysize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnEncoding::~ColumnEncoding() {
  // @@protoc_insertion_point(destructor:orc.proto.ColumnEncoding)
  SharedDtor();
}

void ColumnEncoding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnEncoding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnEncoding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnEncoding_descriptor_;
}

const ColumnEncoding& ColumnEncoding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

ColumnEncoding* ColumnEncoding::default_instance_ = NULL;

ColumnEncoding* ColumnEncoding::New() const {
  return new ColumnEncoding;
}

void ColumnEncoding::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColumnEncoding*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kind_, dictionarysize_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnEncoding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.ColumnEncoding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .orc.proto.ColumnEncoding.Kind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::orc::proto::ColumnEncoding_Kind_IsValid(value)) {
            set_kind(static_cast< ::orc::proto::ColumnEncoding_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dictionarySize;
        break;
      }

      // optional uint32 dictionarySize = 2;
      case 2: {
        if (tag == 16) {
         parse_dictionarySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dictionarysize_)));
          set_has_dictionarysize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.ColumnEncoding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.ColumnEncoding)
  return false;
#undef DO_
}

void ColumnEncoding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.ColumnEncoding)
  // optional .orc.proto.ColumnEncoding.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional uint32 dictionarySize = 2;
  if (has_dictionarysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dictionarysize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.ColumnEncoding)
}

::google::protobuf::uint8* ColumnEncoding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.ColumnEncoding)
  // optional .orc.proto.ColumnEncoding.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional uint32 dictionarySize = 2;
  if (has_dictionarysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dictionarysize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.ColumnEncoding)
  return target;
}

int ColumnEncoding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .orc.proto.ColumnEncoding.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional uint32 dictionarySize = 2;
    if (has_dictionarysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dictionarysize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnEncoding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnEncoding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnEncoding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnEncoding::MergeFrom(const ColumnEncoding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_dictionarysize()) {
      set_dictionarysize(from.dictionarysize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnEncoding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnEncoding::CopyFrom(const ColumnEncoding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnEncoding::IsInitialized() const {

  return true;
}

void ColumnEncoding::Swap(ColumnEncoding* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(dictionarysize_, other->dictionarysize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnEncoding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnEncoding_descriptor_;
  metadata.reflection = ColumnEncoding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StripeFooter::kStreamsFieldNumber;
const int StripeFooter::kColumnsFieldNumber;
const int StripeFooter::kWriterTimezoneFieldNumber;
#endif  // !_MSC_VER

StripeFooter::StripeFooter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.StripeFooter)
}

void StripeFooter::InitAsDefaultInstance() {
}

StripeFooter::StripeFooter(const StripeFooter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.StripeFooter)
}

void StripeFooter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  writertimezone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StripeFooter::~StripeFooter() {
  // @@protoc_insertion_point(destructor:orc.proto.StripeFooter)
  SharedDtor();
}

void StripeFooter::SharedDtor() {
  if (writertimezone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete writertimezone_;
  }
  if (this != default_instance_) {
  }
}

void StripeFooter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StripeFooter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StripeFooter_descriptor_;
}

const StripeFooter& StripeFooter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

StripeFooter* StripeFooter::default_instance_ = NULL;

StripeFooter* StripeFooter::New() const {
  return new StripeFooter;
}

void StripeFooter::Clear() {
  if (has_writertimezone()) {
    if (writertimezone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      writertimezone_->clear();
    }
  }
  streams_.Clear();
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StripeFooter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.StripeFooter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .orc.proto.Stream streams = 1;
      case 1: {
        if (tag == 10) {
         parse_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_streams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_streams;
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }

      // repeated .orc.proto.ColumnEncoding columns = 2;
      case 2: {
        if (tag == 18) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        if (input->ExpectTag(26)) goto parse_writerTimezone;
        break;
      }

      // optional string writerTimezone = 3;
      case 3: {
        if (tag == 26) {
         parse_writerTimezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_writertimezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->writertimezone().data(), this->writertimezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "writertimezone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.StripeFooter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.StripeFooter)
  return false;
#undef DO_
}

void StripeFooter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.StripeFooter)
  // repeated .orc.proto.Stream streams = 1;
  for (int i = 0; i < this->streams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->streams(i), output);
  }

  // repeated .orc.proto.ColumnEncoding columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }

  // optional string writerTimezone = 3;
  if (has_writertimezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->writertimezone().data(), this->writertimezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "writertimezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->writertimezone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.StripeFooter)
}

::google::protobuf::uint8* StripeFooter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.StripeFooter)
  // repeated .orc.proto.Stream streams = 1;
  for (int i = 0; i < this->streams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->streams(i), target);
  }

  // repeated .orc.proto.ColumnEncoding columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columns(i), target);
  }

  // optional string writerTimezone = 3;
  if (has_writertimezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->writertimezone().data(), this->writertimezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "writertimezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->writertimezone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.StripeFooter)
  return target;
}

int StripeFooter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string writerTimezone = 3;
    if (has_writertimezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->writertimezone());
    }

  }
  // repeated .orc.proto.Stream streams = 1;
  total_size += 1 * this->streams_size();
  for (int i = 0; i < this->streams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streams(i));
  }

  // repeated .orc.proto.ColumnEncoding columns = 2;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StripeFooter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StripeFooter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StripeFooter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StripeFooter::MergeFrom(const StripeFooter& from) {
  GOOGLE_CHECK_NE(&from, this);
  streams_.MergeFrom(from.streams_);
  columns_.MergeFrom(from.columns_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_writertimezone()) {
      set_writertimezone(from.writertimezone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StripeFooter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeFooter::CopyFrom(const StripeFooter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeFooter::IsInitialized() const {

  return true;
}

void StripeFooter::Swap(StripeFooter* other) {
  if (other != this) {
    streams_.Swap(&other->streams_);
    columns_.Swap(&other->columns_);
    std::swap(writertimezone_, other->writertimezone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StripeFooter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StripeFooter_descriptor_;
  metadata.reflection = StripeFooter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Type_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_Kind_descriptor_;
}
bool Type_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Type_Kind Type::BOOLEAN;
const Type_Kind Type::BYTE;
const Type_Kind Type::SHORT;
const Type_Kind Type::INT;
const Type_Kind Type::LONG;
const Type_Kind Type::FLOAT;
const Type_Kind Type::DOUBLE;
const Type_Kind Type::STRING;
const Type_Kind Type::BINARY;
const Type_Kind Type::TIMESTAMP;
const Type_Kind Type::LIST;
const Type_Kind Type::MAP;
const Type_Kind Type::STRUCT;
const Type_Kind Type::UNION;
const Type_Kind Type::DECIMAL;
const Type_Kind Type::DATE;
const Type_Kind Type::VARCHAR;
const Type_Kind Type::CHAR;
const Type_Kind Type::Kind_MIN;
const Type_Kind Type::Kind_MAX;
const int Type::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Type::kKindFieldNumber;
const int Type::kSubtypesFieldNumber;
const int Type::kFieldNamesFieldNumber;
const int Type::kMaximumLengthFieldNumber;
const int Type::kPrecisionFieldNumber;
const int Type::kScaleFieldNumber;
#endif  // !_MSC_VER

Type::Type()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.Type)
}

void Type::InitAsDefaultInstance() {
}

Type::Type(const Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.Type)
}

void Type::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kind_ = 0;
  maximumlength_ = 0u;
  precision_ = 0u;
  scale_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:orc.proto.Type)
  SharedDtor();
}

void Type::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}

const Type& Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

Type* Type::default_instance_ = NULL;

Type* Type::New() const {
  return new Type;
}

void Type::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Type*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kind_, maximumlength_);
  ZR_(precision_, scale_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  subtypes_.Clear();
  fieldnames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.Type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .orc.proto.Type.Kind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::orc::proto::Type_Kind_IsValid(value)) {
            set_kind(static_cast< ::orc::proto::Type_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subtypes;
        break;
      }

      // repeated uint32 subtypes = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_subtypes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subtypes())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_subtypes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fieldNames;
        break;
      }

      // repeated string fieldNames = 3;
      case 3: {
        if (tag == 26) {
         parse_fieldNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fieldnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldnames(this->fieldnames_size() - 1).data(),
            this->fieldnames(this->fieldnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fieldnames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fieldNames;
        if (input->ExpectTag(32)) goto parse_maximumLength;
        break;
      }

      // optional uint32 maximumLength = 4;
      case 4: {
        if (tag == 32) {
         parse_maximumLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximumlength_)));
          set_has_maximumlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_precision;
        break;
      }

      // optional uint32 precision = 5;
      case 5: {
        if (tag == 40) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_scale;
        break;
      }

      // optional uint32 scale = 6;
      case 6: {
        if (tag == 48) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.Type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.Type)
  return false;
#undef DO_
}

void Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.Type)
  // optional .orc.proto.Type.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // repeated uint32 subtypes = 2 [packed = true];
  if (this->subtypes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_subtypes_cached_byte_size_);
  }
  for (int i = 0; i < this->subtypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->subtypes(i), output);
  }

  // repeated string fieldNames = 3;
  for (int i = 0; i < this->fieldnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->fieldnames(i).data(), this->fieldnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "fieldnames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fieldnames(i), output);
  }

  // optional uint32 maximumLength = 4;
  if (has_maximumlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maximumlength(), output);
  }

  // optional uint32 precision = 5;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->precision(), output);
  }

  // optional uint32 scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.Type)
}

::google::protobuf::uint8* Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.Type)
  // optional .orc.proto.Type.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // repeated uint32 subtypes = 2 [packed = true];
  if (this->subtypes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _subtypes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->subtypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->subtypes(i), target);
  }

  // repeated string fieldNames = 3;
  for (int i = 0; i < this->fieldnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldnames(i).data(), this->fieldnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldnames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fieldnames(i), target);
  }

  // optional uint32 maximumLength = 4;
  if (has_maximumlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maximumlength(), target);
  }

  // optional uint32 precision = 5;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->precision(), target);
  }

  // optional uint32 scale = 6;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.Type)
  return target;
}

int Type::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .orc.proto.Type.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional uint32 maximumLength = 4;
    if (has_maximumlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maximumlength());
    }

    // optional uint32 precision = 5;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->precision());
    }

    // optional uint32 scale = 6;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale());
    }

  }
  // repeated uint32 subtypes = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->subtypes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subtypes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _subtypes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string fieldNames = 3;
  total_size += 1 * this->fieldnames_size();
  for (int i = 0; i < this->fieldnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fieldnames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtypes_.MergeFrom(from.subtypes_);
  fieldnames_.MergeFrom(from.fieldnames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_maximumlength()) {
      set_maximumlength(from.maximumlength());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {

  return true;
}

void Type::Swap(Type* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    subtypes_.Swap(&other->subtypes_);
    fieldnames_.Swap(&other->fieldnames_);
    std::swap(maximumlength_, other->maximumlength_);
    std::swap(precision_, other->precision_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Type_descriptor_;
  metadata.reflection = Type_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StripeInformation::kOffsetFieldNumber;
const int StripeInformation::kIndexLengthFieldNumber;
const int StripeInformation::kDataLengthFieldNumber;
const int StripeInformation::kFooterLengthFieldNumber;
const int StripeInformation::kNumberOfRowsFieldNumber;
#endif  // !_MSC_VER

StripeInformation::StripeInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.StripeInformation)
}

void StripeInformation::InitAsDefaultInstance() {
}

StripeInformation::StripeInformation(const StripeInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.StripeInformation)
}

void StripeInformation::SharedCtor() {
  _cached_size_ = 0;
  offset_ = GOOGLE_ULONGLONG(0);
  indexlength_ = GOOGLE_ULONGLONG(0);
  datalength_ = GOOGLE_ULONGLONG(0);
  footerlength_ = GOOGLE_ULONGLONG(0);
  numberofrows_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StripeInformation::~StripeInformation() {
  // @@protoc_insertion_point(destructor:orc.proto.StripeInformation)
  SharedDtor();
}

void StripeInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StripeInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StripeInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StripeInformation_descriptor_;
}

const StripeInformation& StripeInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

StripeInformation* StripeInformation::default_instance_ = NULL;

StripeInformation* StripeInformation::New() const {
  return new StripeInformation;
}

void StripeInformation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StripeInformation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(offset_, numberofrows_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StripeInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.StripeInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_indexLength;
        break;
      }

      // optional uint64 indexLength = 2;
      case 2: {
        if (tag == 16) {
         parse_indexLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &indexlength_)));
          set_has_indexlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dataLength;
        break;
      }

      // optional uint64 dataLength = 3;
      case 3: {
        if (tag == 24) {
         parse_dataLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datalength_)));
          set_has_datalength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_footerLength;
        break;
      }

      // optional uint64 footerLength = 4;
      case 4: {
        if (tag == 32) {
         parse_footerLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &footerlength_)));
          set_has_footerlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numberOfRows;
        break;
      }

      // optional uint64 numberOfRows = 5;
      case 5: {
        if (tag == 40) {
         parse_numberOfRows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &numberofrows_)));
          set_has_numberofrows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.StripeInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.StripeInformation)
  return false;
#undef DO_
}

void StripeInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.StripeInformation)
  // optional uint64 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->offset(), output);
  }

  // optional uint64 indexLength = 2;
  if (has_indexlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->indexlength(), output);
  }

  // optional uint64 dataLength = 3;
  if (has_datalength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->datalength(), output);
  }

  // optional uint64 footerLength = 4;
  if (has_footerlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->footerlength(), output);
  }

  // optional uint64 numberOfRows = 5;
  if (has_numberofrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->numberofrows(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.StripeInformation)
}

::google::protobuf::uint8* StripeInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.StripeInformation)
  // optional uint64 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->offset(), target);
  }

  // optional uint64 indexLength = 2;
  if (has_indexlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->indexlength(), target);
  }

  // optional uint64 dataLength = 3;
  if (has_datalength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->datalength(), target);
  }

  // optional uint64 footerLength = 4;
  if (has_footerlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->footerlength(), target);
  }

  // optional uint64 numberOfRows = 5;
  if (has_numberofrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->numberofrows(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.StripeInformation)
  return target;
}

int StripeInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional uint64 indexLength = 2;
    if (has_indexlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->indexlength());
    }

    // optional uint64 dataLength = 3;
    if (has_datalength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datalength());
    }

    // optional uint64 footerLength = 4;
    if (has_footerlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->footerlength());
    }

    // optional uint64 numberOfRows = 5;
    if (has_numberofrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->numberofrows());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StripeInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StripeInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StripeInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StripeInformation::MergeFrom(const StripeInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_indexlength()) {
      set_indexlength(from.indexlength());
    }
    if (from.has_datalength()) {
      set_datalength(from.datalength());
    }
    if (from.has_footerlength()) {
      set_footerlength(from.footerlength());
    }
    if (from.has_numberofrows()) {
      set_numberofrows(from.numberofrows());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StripeInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeInformation::CopyFrom(const StripeInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeInformation::IsInitialized() const {

  return true;
}

void StripeInformation::Swap(StripeInformation* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(indexlength_, other->indexlength_);
    std::swap(datalength_, other->datalength_);
    std::swap(footerlength_, other->footerlength_);
    std::swap(numberofrows_, other->numberofrows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StripeInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StripeInformation_descriptor_;
  metadata.reflection = StripeInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMetadataItem::kNameFieldNumber;
const int UserMetadataItem::kValueFieldNumber;
#endif  // !_MSC_VER

UserMetadataItem::UserMetadataItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.UserMetadataItem)
}

void UserMetadataItem::InitAsDefaultInstance() {
}

UserMetadataItem::UserMetadataItem(const UserMetadataItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.UserMetadataItem)
}

void UserMetadataItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMetadataItem::~UserMetadataItem() {
  // @@protoc_insertion_point(destructor:orc.proto.UserMetadataItem)
  SharedDtor();
}

void UserMetadataItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void UserMetadataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMetadataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMetadataItem_descriptor_;
}

const UserMetadataItem& UserMetadataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

UserMetadataItem* UserMetadataItem::default_instance_ = NULL;

UserMetadataItem* UserMetadataItem::New() const {
  return new UserMetadataItem;
}

void UserMetadataItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMetadataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.UserMetadataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.UserMetadataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.UserMetadataItem)
  return false;
#undef DO_
}

void UserMetadataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.UserMetadataItem)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.UserMetadataItem)
}

::google::protobuf::uint8* UserMetadataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.UserMetadataItem)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.UserMetadataItem)
  return target;
}

int UserMetadataItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMetadataItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMetadataItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMetadataItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMetadataItem::MergeFrom(const UserMetadataItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMetadataItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMetadataItem::CopyFrom(const UserMetadataItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMetadataItem::IsInitialized() const {

  return true;
}

void UserMetadataItem::Swap(UserMetadataItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMetadataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMetadataItem_descriptor_;
  metadata.reflection = UserMetadataItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StripeStatistics::kColStatsFieldNumber;
#endif  // !_MSC_VER

StripeStatistics::StripeStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.StripeStatistics)
}

void StripeStatistics::InitAsDefaultInstance() {
}

StripeStatistics::StripeStatistics(const StripeStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.StripeStatistics)
}

void StripeStatistics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StripeStatistics::~StripeStatistics() {
  // @@protoc_insertion_point(destructor:orc.proto.StripeStatistics)
  SharedDtor();
}

void StripeStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StripeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StripeStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StripeStatistics_descriptor_;
}

const StripeStatistics& StripeStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

StripeStatistics* StripeStatistics::default_instance_ = NULL;

StripeStatistics* StripeStatistics::New() const {
  return new StripeStatistics;
}

void StripeStatistics::Clear() {
  colstats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StripeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.StripeStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .orc.proto.ColumnStatistics colStats = 1;
      case 1: {
        if (tag == 10) {
         parse_colStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_colstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_colStats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.StripeStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.StripeStatistics)
  return false;
#undef DO_
}

void StripeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.StripeStatistics)
  // repeated .orc.proto.ColumnStatistics colStats = 1;
  for (int i = 0; i < this->colstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->colstats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.StripeStatistics)
}

::google::protobuf::uint8* StripeStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.StripeStatistics)
  // repeated .orc.proto.ColumnStatistics colStats = 1;
  for (int i = 0; i < this->colstats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->colstats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.StripeStatistics)
  return target;
}

int StripeStatistics::ByteSize() const {
  int total_size = 0;

  // repeated .orc.proto.ColumnStatistics colStats = 1;
  total_size += 1 * this->colstats_size();
  for (int i = 0; i < this->colstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colstats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StripeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StripeStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StripeStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StripeStatistics::MergeFrom(const StripeStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  colstats_.MergeFrom(from.colstats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StripeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeStatistics::CopyFrom(const StripeStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeStatistics::IsInitialized() const {

  return true;
}

void StripeStatistics::Swap(StripeStatistics* other) {
  if (other != this) {
    colstats_.Swap(&other->colstats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StripeStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StripeStatistics_descriptor_;
  metadata.reflection = StripeStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Metadata::kStripeStatsFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.Metadata)
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.Metadata)
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:orc.proto.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
  stripestats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .orc.proto.StripeStatistics stripeStats = 1;
      case 1: {
        if (tag == 10) {
         parse_stripeStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stripestats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_stripeStats;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.Metadata)
  // repeated .orc.proto.StripeStatistics stripeStats = 1;
  for (int i = 0; i < this->stripestats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stripestats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.Metadata)
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.Metadata)
  // repeated .orc.proto.StripeStatistics stripeStats = 1;
  for (int i = 0; i < this->stripestats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stripestats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.Metadata)
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;

  // repeated .orc.proto.StripeStatistics stripeStats = 1;
  total_size += 1 * this->stripestats_size();
  for (int i = 0; i < this->stripestats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stripestats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  stripestats_.MergeFrom(from.stripestats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {

  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    stripestats_.Swap(&other->stripestats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Footer::kHeaderLengthFieldNumber;
const int Footer::kContentLengthFieldNumber;
const int Footer::kStripesFieldNumber;
const int Footer::kTypesFieldNumber;
const int Footer::kMetadataFieldNumber;
const int Footer::kNumberOfRowsFieldNumber;
const int Footer::kStatisticsFieldNumber;
const int Footer::kRowIndexStrideFieldNumber;
#endif  // !_MSC_VER

Footer::Footer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.Footer)
}

void Footer::InitAsDefaultInstance() {
}

Footer::Footer(const Footer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.Footer)
}

void Footer::SharedCtor() {
  _cached_size_ = 0;
  headerlength_ = GOOGLE_ULONGLONG(0);
  contentlength_ = GOOGLE_ULONGLONG(0);
  numberofrows_ = GOOGLE_ULONGLONG(0);
  rowindexstride_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Footer::~Footer() {
  // @@protoc_insertion_point(destructor:orc.proto.Footer)
  SharedDtor();
}

void Footer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Footer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Footer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Footer_descriptor_;
}

const Footer& Footer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

Footer* Footer::default_instance_ = NULL;

Footer* Footer::New() const {
  return new Footer;
}

void Footer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Footer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 163) {
    ZR_(headerlength_, contentlength_);
    numberofrows_ = GOOGLE_ULONGLONG(0);
    rowindexstride_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  stripes_.Clear();
  types_.Clear();
  metadata_.Clear();
  statistics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Footer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.Footer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 headerLength = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &headerlength_)));
          set_has_headerlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_contentLength;
        break;
      }

      // optional uint64 contentLength = 2;
      case 2: {
        if (tag == 16) {
         parse_contentLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &contentlength_)));
          set_has_contentlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stripes;
        break;
      }

      // repeated .orc.proto.StripeInformation stripes = 3;
      case 3: {
        if (tag == 26) {
         parse_stripes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stripes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stripes;
        if (input->ExpectTag(34)) goto parse_types;
        break;
      }

      // repeated .orc.proto.Type types = 4;
      case 4: {
        if (tag == 34) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_types;
        if (input->ExpectTag(42)) goto parse_metadata;
        break;
      }

      // repeated .orc.proto.UserMetadataItem metadata = 5;
      case 5: {
        if (tag == 42) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_metadata;
        if (input->ExpectTag(48)) goto parse_numberOfRows;
        break;
      }

      // optional uint64 numberOfRows = 6;
      case 6: {
        if (tag == 48) {
         parse_numberOfRows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &numberofrows_)));
          set_has_numberofrows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_statistics;
        break;
      }

      // repeated .orc.proto.ColumnStatistics statistics = 7;
      case 7: {
        if (tag == 58) {
         parse_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_statistics;
        if (input->ExpectTag(64)) goto parse_rowIndexStride;
        break;
      }

      // optional uint32 rowIndexStride = 8;
      case 8: {
        if (tag == 64) {
         parse_rowIndexStride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rowindexstride_)));
          set_has_rowindexstride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.Footer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.Footer)
  return false;
#undef DO_
}

void Footer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.Footer)
  // optional uint64 headerLength = 1;
  if (has_headerlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->headerlength(), output);
  }

  // optional uint64 contentLength = 2;
  if (has_contentlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->contentlength(), output);
  }

  // repeated .orc.proto.StripeInformation stripes = 3;
  for (int i = 0; i < this->stripes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stripes(i), output);
  }

  // repeated .orc.proto.Type types = 4;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->types(i), output);
  }

  // repeated .orc.proto.UserMetadataItem metadata = 5;
  for (int i = 0; i < this->metadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->metadata(i), output);
  }

  // optional uint64 numberOfRows = 6;
  if (has_numberofrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->numberofrows(), output);
  }

  // repeated .orc.proto.ColumnStatistics statistics = 7;
  for (int i = 0; i < this->statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->statistics(i), output);
  }

  // optional uint32 rowIndexStride = 8;
  if (has_rowindexstride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rowindexstride(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.Footer)
}

::google::protobuf::uint8* Footer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.Footer)
  // optional uint64 headerLength = 1;
  if (has_headerlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->headerlength(), target);
  }

  // optional uint64 contentLength = 2;
  if (has_contentlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->contentlength(), target);
  }

  // repeated .orc.proto.StripeInformation stripes = 3;
  for (int i = 0; i < this->stripes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stripes(i), target);
  }

  // repeated .orc.proto.Type types = 4;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->types(i), target);
  }

  // repeated .orc.proto.UserMetadataItem metadata = 5;
  for (int i = 0; i < this->metadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->metadata(i), target);
  }

  // optional uint64 numberOfRows = 6;
  if (has_numberofrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->numberofrows(), target);
  }

  // repeated .orc.proto.ColumnStatistics statistics = 7;
  for (int i = 0; i < this->statistics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->statistics(i), target);
  }

  // optional uint32 rowIndexStride = 8;
  if (has_rowindexstride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rowindexstride(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.Footer)
  return target;
}

int Footer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 headerLength = 1;
    if (has_headerlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->headerlength());
    }

    // optional uint64 contentLength = 2;
    if (has_contentlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->contentlength());
    }

    // optional uint64 numberOfRows = 6;
    if (has_numberofrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->numberofrows());
    }

    // optional uint32 rowIndexStride = 8;
    if (has_rowindexstride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rowindexstride());
    }

  }
  // repeated .orc.proto.StripeInformation stripes = 3;
  total_size += 1 * this->stripes_size();
  for (int i = 0; i < this->stripes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stripes(i));
  }

  // repeated .orc.proto.Type types = 4;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->types(i));
  }

  // repeated .orc.proto.UserMetadataItem metadata = 5;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }

  // repeated .orc.proto.ColumnStatistics statistics = 7;
  total_size += 1 * this->statistics_size();
  for (int i = 0; i < this->statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statistics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Footer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Footer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Footer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Footer::MergeFrom(const Footer& from) {
  GOOGLE_CHECK_NE(&from, this);
  stripes_.MergeFrom(from.stripes_);
  types_.MergeFrom(from.types_);
  metadata_.MergeFrom(from.metadata_);
  statistics_.MergeFrom(from.statistics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headerlength()) {
      set_headerlength(from.headerlength());
    }
    if (from.has_contentlength()) {
      set_contentlength(from.contentlength());
    }
    if (from.has_numberofrows()) {
      set_numberofrows(from.numberofrows());
    }
    if (from.has_rowindexstride()) {
      set_rowindexstride(from.rowindexstride());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Footer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Footer::CopyFrom(const Footer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footer::IsInitialized() const {

  return true;
}

void Footer::Swap(Footer* other) {
  if (other != this) {
    std::swap(headerlength_, other->headerlength_);
    std::swap(contentlength_, other->contentlength_);
    stripes_.Swap(&other->stripes_);
    types_.Swap(&other->types_);
    metadata_.Swap(&other->metadata_);
    std::swap(numberofrows_, other->numberofrows_);
    statistics_.Swap(&other->statistics_);
    std::swap(rowindexstride_, other->rowindexstride_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Footer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Footer_descriptor_;
  metadata.reflection = Footer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostScript::kFooterLengthFieldNumber;
const int PostScript::kCompressionFieldNumber;
const int PostScript::kCompressionBlockSizeFieldNumber;
const int PostScript::kVersionFieldNumber;
const int PostScript::kMetadataLengthFieldNumber;
const int PostScript::kWriterVersionFieldNumber;
const int PostScript::kMagicFieldNumber;
#endif  // !_MSC_VER

PostScript::PostScript()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.PostScript)
}

void PostScript::InitAsDefaultInstance() {
}

PostScript::PostScript(const PostScript& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.PostScript)
}

void PostScript::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  footerlength_ = GOOGLE_ULONGLONG(0);
  compression_ = 0;
  compressionblocksize_ = GOOGLE_ULONGLONG(0);
  metadatalength_ = GOOGLE_ULONGLONG(0);
  writerversion_ = 0u;
  magic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostScript::~PostScript() {
  // @@protoc_insertion_point(destructor:orc.proto.PostScript)
  SharedDtor();
}

void PostScript::SharedDtor() {
  if (magic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete magic_;
  }
  if (this != default_instance_) {
  }
}

void PostScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostScript::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostScript_descriptor_;
}

const PostScript& PostScript::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

PostScript* PostScript::default_instance_ = NULL;

PostScript* PostScript::New() const {
  return new PostScript;
}

void PostScript::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PostScript*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(footerlength_, compressionblocksize_);
    ZR_(compression_, metadatalength_);
    if (has_magic()) {
      if (magic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        magic_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  version_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.PostScript)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(64002);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 footerLength = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &footerlength_)));
          set_has_footerlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_compression;
        break;
      }

      // optional .orc.proto.CompressionKind compression = 2;
      case 2: {
        if (tag == 16) {
         parse_compression:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::orc::proto::CompressionKind_IsValid(value)) {
            set_compression(static_cast< ::orc::proto::CompressionKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_compressionBlockSize;
        break;
      }

      // optional uint64 compressionBlockSize = 3;
      case 3: {
        if (tag == 24) {
         parse_compressionBlockSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compressionblocksize_)));
          set_has_compressionblocksize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // repeated uint32 version = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_version())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_version())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_metadataLength;
        break;
      }

      // optional uint64 metadataLength = 5;
      case 5: {
        if (tag == 40) {
         parse_metadataLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &metadatalength_)));
          set_has_metadatalength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_writerVersion;
        break;
      }

      // optional uint32 writerVersion = 6;
      case 6: {
        if (tag == 48) {
         parse_writerVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writerversion_)));
          set_has_writerversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64002)) goto parse_magic;
        break;
      }

      // optional string magic = 8000;
      case 8000: {
        if (tag == 64002) {
         parse_magic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_magic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->magic().data(), this->magic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "magic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.PostScript)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.PostScript)
  return false;
#undef DO_
}

void PostScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.PostScript)
  // optional uint64 footerLength = 1;
  if (has_footerlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->footerlength(), output);
  }

  // optional .orc.proto.CompressionKind compression = 2;
  if (has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->compression(), output);
  }

  // optional uint64 compressionBlockSize = 3;
  if (has_compressionblocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->compressionblocksize(), output);
  }

  // repeated uint32 version = 4 [packed = true];
  if (this->version_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_version_cached_byte_size_);
  }
  for (int i = 0; i < this->version_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->version(i), output);
  }

  // optional uint64 metadataLength = 5;
  if (has_metadatalength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->metadatalength(), output);
  }

  // optional uint32 writerVersion = 6;
  if (has_writerversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->writerversion(), output);
  }

  // optional string magic = 8000;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magic().data(), this->magic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "magic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8000, this->magic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.PostScript)
}

::google::protobuf::uint8* PostScript::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.PostScript)
  // optional uint64 footerLength = 1;
  if (has_footerlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->footerlength(), target);
  }

  // optional .orc.proto.CompressionKind compression = 2;
  if (has_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->compression(), target);
  }

  // optional uint64 compressionBlockSize = 3;
  if (has_compressionblocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->compressionblocksize(), target);
  }

  // repeated uint32 version = 4 [packed = true];
  if (this->version_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _version_cached_byte_size_, target);
  }
  for (int i = 0; i < this->version_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->version(i), target);
  }

  // optional uint64 metadataLength = 5;
  if (has_metadatalength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->metadatalength(), target);
  }

  // optional uint32 writerVersion = 6;
  if (has_writerversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->writerversion(), target);
  }

  // optional string magic = 8000;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->magic().data(), this->magic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "magic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8000, this->magic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.PostScript)
  return target;
}

int PostScript::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 footerLength = 1;
    if (has_footerlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->footerlength());
    }

    // optional .orc.proto.CompressionKind compression = 2;
    if (has_compression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compression());
    }

    // optional uint64 compressionBlockSize = 3;
    if (has_compressionblocksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->compressionblocksize());
    }

    // optional uint64 metadataLength = 5;
    if (has_metadatalength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->metadatalength());
    }

    // optional uint32 writerVersion = 6;
    if (has_writerversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writerversion());
    }

    // optional string magic = 8000;
    if (has_magic()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->magic());
    }

  }
  // repeated uint32 version = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->version_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->version(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _version_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostScript::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostScript* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostScript*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostScript::MergeFrom(const PostScript& from) {
  GOOGLE_CHECK_NE(&from, this);
  version_.MergeFrom(from.version_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_footerlength()) {
      set_footerlength(from.footerlength());
    }
    if (from.has_compression()) {
      set_compression(from.compression());
    }
    if (from.has_compressionblocksize()) {
      set_compressionblocksize(from.compressionblocksize());
    }
    if (from.has_metadatalength()) {
      set_metadatalength(from.metadatalength());
    }
    if (from.has_writerversion()) {
      set_writerversion(from.writerversion());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostScript::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostScript::CopyFrom(const PostScript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostScript::IsInitialized() const {

  return true;
}

void PostScript::Swap(PostScript* other) {
  if (other != this) {
    std::swap(footerlength_, other->footerlength_);
    std::swap(compression_, other->compression_);
    std::swap(compressionblocksize_, other->compressionblocksize_);
    version_.Swap(&other->version_);
    std::swap(metadatalength_, other->metadatalength_);
    std::swap(writerversion_, other->writerversion_);
    std::swap(magic_, other->magic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostScript::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostScript_descriptor_;
  metadata.reflection = PostScript_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileTail::kPostscriptFieldNumber;
const int FileTail::kFooterFieldNumber;
const int FileTail::kFileLengthFieldNumber;
const int FileTail::kPostscriptLengthFieldNumber;
#endif  // !_MSC_VER

FileTail::FileTail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orc.proto.FileTail)
}

void FileTail::InitAsDefaultInstance() {
  postscript_ = const_cast< ::orc::proto::PostScript*>(&::orc::proto::PostScript::default_instance());
  footer_ = const_cast< ::orc::proto::Footer*>(&::orc::proto::Footer::default_instance());
}

FileTail::FileTail(const FileTail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orc.proto.FileTail)
}

void FileTail::SharedCtor() {
  _cached_size_ = 0;
  postscript_ = NULL;
  footer_ = NULL;
  filelength_ = GOOGLE_ULONGLONG(0);
  postscriptlength_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileTail::~FileTail() {
  // @@protoc_insertion_point(destructor:orc.proto.FileTail)
  SharedDtor();
}

void FileTail::SharedDtor() {
  if (this != default_instance_) {
    delete postscript_;
    delete footer_;
  }
}

void FileTail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileTail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileTail_descriptor_;
}

const FileTail& FileTail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_orc_5fproto_2eproto();
  return *default_instance_;
}

FileTail* FileTail::default_instance_ = NULL;

FileTail* FileTail::New() const {
  return new FileTail;
}

void FileTail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileTail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(filelength_, postscriptlength_);
    if (has_postscript()) {
      if (postscript_ != NULL) postscript_->::orc::proto::PostScript::Clear();
    }
    if (has_footer()) {
      if (footer_ != NULL) footer_->::orc::proto::Footer::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileTail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orc.proto.FileTail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .orc.proto.PostScript postscript = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_postscript()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_footer;
        break;
      }

      // optional .orc.proto.Footer footer = 2;
      case 2: {
        if (tag == 18) {
         parse_footer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fileLength;
        break;
      }

      // optional uint64 fileLength = 3;
      case 3: {
        if (tag == 24) {
         parse_fileLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filelength_)));
          set_has_filelength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_postscriptLength;
        break;
      }

      // optional uint64 postscriptLength = 4;
      case 4: {
        if (tag == 32) {
         parse_postscriptLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &postscriptlength_)));
          set_has_postscriptlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orc.proto.FileTail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orc.proto.FileTail)
  return false;
#undef DO_
}

void FileTail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orc.proto.FileTail)
  // optional .orc.proto.PostScript postscript = 1;
  if (has_postscript()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->postscript(), output);
  }

  // optional .orc.proto.Footer footer = 2;
  if (has_footer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->footer(), output);
  }

  // optional uint64 fileLength = 3;
  if (has_filelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->filelength(), output);
  }

  // optional uint64 postscriptLength = 4;
  if (has_postscriptlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->postscriptlength(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orc.proto.FileTail)
}

::google::protobuf::uint8* FileTail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orc.proto.FileTail)
  // optional .orc.proto.PostScript postscript = 1;
  if (has_postscript()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->postscript(), target);
  }

  // optional .orc.proto.Footer footer = 2;
  if (has_footer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->footer(), target);
  }

  // optional uint64 fileLength = 3;
  if (has_filelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->filelength(), target);
  }

  // optional uint64 postscriptLength = 4;
  if (has_postscriptlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->postscriptlength(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orc.proto.FileTail)
  return target;
}

int FileTail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .orc.proto.PostScript postscript = 1;
    if (has_postscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->postscript());
    }

    // optional .orc.proto.Footer footer = 2;
    if (has_footer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footer());
    }

    // optional uint64 fileLength = 3;
    if (has_filelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filelength());
    }

    // optional uint64 postscriptLength = 4;
    if (has_postscriptlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->postscriptlength());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileTail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileTail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileTail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileTail::MergeFrom(const FileTail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_postscript()) {
      mutable_postscript()->::orc::proto::PostScript::MergeFrom(from.postscript());
    }
    if (from.has_footer()) {
      mutable_footer()->::orc::proto::Footer::MergeFrom(from.footer());
    }
    if (from.has_filelength()) {
      set_filelength(from.filelength());
    }
    if (from.has_postscriptlength()) {
      set_postscriptlength(from.postscriptlength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileTail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTail::CopyFrom(const FileTail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTail::IsInitialized() const {

  return true;
}

void FileTail::Swap(FileTail* other) {
  if (other != this) {
    std::swap(postscript_, other->postscript_);
    std::swap(footer_, other->footer_);
    std::swap(filelength_, other->filelength_);
    std::swap(postscriptlength_, other->postscriptlength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileTail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileTail_descriptor_;
  metadata.reflection = FileTail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace orc

// @@protoc_insertion_point(global_scope)
