// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
#include "llvm-codegen.h"
using namespace llvm;



void printInteger(IRBuilder<> &builder, LlvmCodeGen *gen, Value *value) {
 
 Function* func_printf = gen->module()->getFunction("printf");
 if (!func_printf) {
	 std::vector<Type*>FuncTy_6_args;
	 FuncTy_6_args.push_back(gen->int_ptr_type(8));
	 FunctionType* FuncTy_6 = FunctionType::get(
	  /*Result=*/gen->int_type(32),
	  /*Params=*/FuncTy_6_args,
	  /*isVarArg=*/true);
 func_printf = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", gen->module()); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 // Global Variable Declarations

 ArrayType* ArrayTy_0 = ArrayType::get(gen->int_type(8), 4);
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*gen->module(),
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_7 = ConstantDataArray::getString(gen->context(), "%d\x0A", true);

 ConstantInt* const_int32_9 = ConstantInt::get(gen->context(), APInt(32, StringRef("10"), 10));
 std::vector<Constant*> const_ptr_10_indices;
 const_ptr_10_indices.push_back(gen->getConstant(32,0));
 const_ptr_10_indices.push_back(gen->getConstant(32,0));
 Constant* const_ptr_10 = ConstantExpr::getGetElementPtr(gen->int_type(8),gvar_array__str,const_ptr_10_indices);
 gvar_array__str->setInitializer(const_array_7);

 // Function: _Z5printv (func__Z5printv)
 {
  std::vector<Value*> int32_15_params;
  int32_15_params.push_back(const_ptr_10);
  int32_15_params.push_back(value);
  builder.CreateCall(func_printf, int32_15_params);
 }
 
}
